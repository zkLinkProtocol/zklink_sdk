name: ci

on:
  pull_request:
    branches:
      - main
      - v*
  push:
    branches:
      - main
      - v*

jobs:
  fmt:
    name: cargo fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # sort the dependencies in Cargo.toml
  cargo_sort:
    name: cargo sort
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-sort
          version: latest
      - run: cargo sort -c

  # check cargo.toml format
  taplo_fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: baptiste0928/cargo-install@v2
        with:
          crate: taplo-cli
          version: latest
      - run: taplo check

  # check unused dependency
  cargo_machete:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-machete
          version: latest
      - run: cargo-machete

  clippy_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: rustup component add clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --features ffi -- -D warnings
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --features web -- -D warnings
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- -D warnings

  build:
    name: cargo build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/cargo@v1
        with:
          command: build

  go_binding:
    name: go binding
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: baptiste0928/cargo-install@v2
        with:
          crate: uniffi-bindgen-go
          git: https://github.com/NordSecurity/uniffi-bindgen-go
          tag: "v0.1.5+v0.23.0"
          cache-key: "uniffi-bindgen-go@v0.1.5+v0.23.0"
      - uses: actions/setup-go@v4
        with:
          go-version: 1.21
      - run: make test_go

  python_binding:
    name: python binding
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - run: make build_python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: make copy_lib_to_py_example run_example_python

  dart_binding:
    name: dart binding
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
      - name: build
        run: |
          cd bindings/dart
          cargo install 'flutter_rust_bridge_codegen@2.0.0-dev.32'
          flutter pub get
          flutter_rust_bridge_codegen generate
          cd rust
          cargo build --profile dart
          cd ..
          cp ../../target/dart/*.so .
          export LD_LIBRARY_PATH=./:$LD_LIBRARY_PATH
          dart pub add --dev test
          dart test/main.dart 

  build_wasm:
    name: build wasm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - run: make build_wasm

  test:
    name: cargo test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - run: make test
