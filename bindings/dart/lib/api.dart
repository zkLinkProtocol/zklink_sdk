// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

bool isTokenAmountPackable({required String amount}) =>
    RustLib.instance.api.crateApiIsTokenAmountPackable(amount: amount);

bool isFeeAmountPackable({required String fee}) =>
    RustLib.instance.api.crateApiIsFeeAmountPackable(fee: fee);

String closestPackableTokenAmount({required String amount}) =>
    RustLib.instance.api.crateApiClosestPackableTokenAmount(amount: amount);

String closestPackableFeeAmount({required String fee}) =>
    RustLib.instance.api.crateApiClosestPackableFeeAmount(fee: fee);

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<AutoDeleveraging>>
abstract class AutoDeleveraging implements RustOpaqueInterface {
  factory AutoDeleveraging(
          {required int accountId,
          required int subAccountId,
          required int subAccountNonce,
          required List<ContractPrice> contractPrices,
          required List<SpotPriceInfo> marginPrices,
          required int adlAccountId,
          required int pairId,
          required String adlSize,
          required String adlPrice,
          required String fee,
          required int feeToken}) =>
      RustLib.instance.api.crateApiAutoDeleveragingNew(
          accountId: accountId,
          subAccountId: subAccountId,
          subAccountNonce: subAccountNonce,
          contractPrices: contractPrices,
          marginPrices: marginPrices,
          adlAccountId: adlAccountId,
          pairId: pairId,
          adlSize: adlSize,
          adlPrice: adlPrice,
          fee: fee,
          feeToken: feeToken);

  void sign({required ZkLinkSigner zkLinkSigner});

  String toJson();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ChangePubKey>>
abstract class ChangePubKey implements RustOpaqueInterface {
  String getEthSignMsg({required int nonce, required int accountId});

  factory ChangePubKey(
          {required int chainId,
          required int accountId,
          required int subAccountId,
          required String newPubkeyHash,
          required int feeToken,
          required String fee,
          required int nonce,
          String? ethSignature,
          int? ts}) =>
      RustLib.instance.api.crateApiChangePubKeyNew(
          chainId: chainId,
          accountId: accountId,
          subAccountId: subAccountId,
          newPubkeyHash: newPubkeyHash,
          feeToken: feeToken,
          fee: fee,
          nonce: nonce,
          ethSignature: ethSignature,
          ts: ts);

  void setEthAuthData({required String sig});

  void sign({required ZkLinkSigner zkLinkSigner});

  String toEip712RequestPayload(
      {required int chainId, required String address});

  String toJson();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Contract>>
abstract class Contract implements RustOpaqueInterface {
  factory Contract(
          {required int accountId,
          required int subAccountId,
          required int slotId,
          required int nonce,
          required int pairId,
          required String size,
          required String price,
          required bool direction,
          required int makerFeeRate,
          required int takerFeeRate,
          required bool hasSubsidy}) =>
      RustLib.instance.api.crateApiContractNew(
          accountId: accountId,
          subAccountId: subAccountId,
          slotId: slotId,
          nonce: nonce,
          pairId: pairId,
          size: size,
          price: price,
          direction: direction,
          makerFeeRate: makerFeeRate,
          takerFeeRate: takerFeeRate,
          hasSubsidy: hasSubsidy);

  void sign({required ZkLinkSigner zkLinkSigner});

  String toJson();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ContractMatching>>
abstract class ContractMatching implements RustOpaqueInterface {
  factory ContractMatching(
          {required int accountId,
          required int subAccountId,
          required Contract taker,
          required List<Contract> maker,
          required String fee,
          required int feeToken,
          required List<ContractPrice> contractPrices,
          required List<SpotPriceInfo> marginPrices}) =>
      RustLib.instance.api.crateApiContractMatchingNew(
          accountId: accountId,
          subAccountId: subAccountId,
          taker: taker,
          maker: maker,
          fee: fee,
          feeToken: feeToken,
          contractPrices: contractPrices,
          marginPrices: marginPrices);

  void sign({required ZkLinkSigner zkLinkSigner});

  String toJson();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ContractPrice>>
abstract class ContractPrice implements RustOpaqueInterface {
  factory ContractPrice({required int pairId, required String marketPrice}) =>
      RustLib.instance.api
          .crateApiContractPriceNew(pairId: pairId, marketPrice: marketPrice);
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EthTxOption>>
abstract class EthTxOption implements RustOpaqueInterface {
  factory EthTxOption(
          {required bool isSupportEip1559,
          required String to,
          double? nonce,
          String? value,
          double? gas,
          String? gasPrice}) =>
      RustLib.instance.api.crateApiEthTxOptionNew(
          isSupportEip1559: isSupportEip1559,
          to: to,
          nonce: nonce,
          value: value,
          gas: gas,
          gasPrice: gasPrice);
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ForcedExit>>
abstract class ForcedExit implements RustOpaqueInterface {
  factory ForcedExit(
          {required int toChainId,
          required int initiatorAccountId,
          required int initiatorSubAccountId,
          required int targetSubAccountId,
          required String target,
          required int l2SourceToken,
          required int l1TargetToken,
          required String exitAmount,
          required int initiatorNonce,
          required bool withdrawToL1,
          int? ts}) =>
      RustLib.instance.api.crateApiForcedExitNew(
          toChainId: toChainId,
          initiatorAccountId: initiatorAccountId,
          initiatorSubAccountId: initiatorSubAccountId,
          targetSubAccountId: targetSubAccountId,
          target: target,
          l2SourceToken: l2SourceToken,
          l1TargetToken: l1TargetToken,
          exitAmount: exitAmount,
          initiatorNonce: initiatorNonce,
          withdrawToL1: withdrawToL1,
          ts: ts);

  void sign({required ZkLinkSigner zkLinkSigner});

  String toJson();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Funding>>
abstract class Funding implements RustOpaqueInterface {
  factory Funding(
          {required int accountId,
          required int subAccountId,
          required int subAccountNonce,
          required List<int> fundingAccountIds,
          required String fee,
          required int feeToken}) =>
      RustLib.instance.api.crateApiFundingNew(
          accountId: accountId,
          subAccountId: subAccountId,
          subAccountNonce: subAccountNonce,
          fundingAccountIds: fundingAccountIds,
          fee: fee,
          feeToken: feeToken);

  void sign({required ZkLinkSigner zkLinkSigner});

  String toJson();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FundingInfo>>
abstract class FundingInfo implements RustOpaqueInterface {
  factory FundingInfo(
          {required int pairId,
          required String price,
          required int fundingRate}) =>
      RustLib.instance.api.crateApiFundingInfoNew(
          pairId: pairId, price: price, fundingRate: fundingRate);
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Liquidation>>
abstract class Liquidation implements RustOpaqueInterface {
  factory Liquidation(
          {required int accountId,
          required int subAccountId,
          required int subAccountNonce,
          required List<ContractPrice> contractPrices,
          required List<SpotPriceInfo> marginPrices,
          required int liquidationAccountId,
          required String fee,
          required int feeToken}) =>
      RustLib.instance.api.crateApiLiquidationNew(
          accountId: accountId,
          subAccountId: subAccountId,
          subAccountNonce: subAccountNonce,
          contractPrices: contractPrices,
          marginPrices: marginPrices,
          liquidationAccountId: liquidationAccountId,
          fee: fee,
          feeToken: feeToken);

  void sign({required ZkLinkSigner zkLinkSigner});

  String toJson();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Order>>
abstract class Order implements RustOpaqueInterface {
  factory Order(
          {required int accountId,
          required int subAccountId,
          required int slotId,
          required int nonce,
          required int baseTokenId,
          required int quoteTokenId,
          required String amount,
          required String price,
          required bool isSell,
          required int makerFeeRate,
          required int takerFeeRate,
          required bool hasSubsidy}) =>
      RustLib.instance.api.crateApiOrderNew(
          accountId: accountId,
          subAccountId: subAccountId,
          slotId: slotId,
          nonce: nonce,
          baseTokenId: baseTokenId,
          quoteTokenId: quoteTokenId,
          amount: amount,
          price: price,
          isSell: isSell,
          makerFeeRate: makerFeeRate,
          takerFeeRate: takerFeeRate,
          hasSubsidy: hasSubsidy);

  void sign({required ZkLinkSigner zkLinkSigner});

  String toJson();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OrderMatching>>
abstract class OrderMatching implements RustOpaqueInterface {
  factory OrderMatching(
          {required int accountId,
          required int subAccountId,
          required Order taker,
          required Order maker,
          required String fee,
          required int feeToken,
          required List<ContractPrice> contractPrices,
          required List<SpotPriceInfo> marginPrices,
          required String expectBaseAmount,
          required String expectQuoteAmount}) =>
      RustLib.instance.api.crateApiOrderMatchingNew(
          accountId: accountId,
          subAccountId: subAccountId,
          taker: taker,
          maker: maker,
          fee: fee,
          feeToken: feeToken,
          contractPrices: contractPrices,
          marginPrices: marginPrices,
          expectBaseAmount: expectBaseAmount,
          expectQuoteAmount: expectQuoteAmount);

  void sign({required ZkLinkSigner zkLinkSigner});

  String toJson();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Parameter>>
abstract class Parameter implements RustOpaqueInterface {
  static Parameter contractInfo(
          {required int pairId,
          required String symbol,
          required int initialMarginRate,
          required int maintenanceMarginRate}) =>
      RustLib.instance.api.crateApiParameterContractInfo(
          pairId: pairId,
          symbol: symbol,
          initialMarginRate: initialMarginRate,
          maintenanceMarginRate: maintenanceMarginRate);

  static Parameter feeAccount({required int accountId}) =>
      RustLib.instance.api.crateApiParameterFeeAccount(accountId: accountId);

  static Parameter fundingInfos({required List<FundingInfo> infos}) =>
      RustLib.instance.api.crateApiParameterFundingInfos(infos: infos);

  static Parameter insuranceFundAccount({required int accountId}) =>
      RustLib.instance.api
          .crateApiParameterInsuranceFundAccount(accountId: accountId);

  static Parameter marginInfo(
          {required int marginId,
          String? symbol,
          required int tokenId,
          required int ratio}) =>
      RustLib.instance.api.crateApiParameterMarginInfo(
          marginId: marginId, symbol: symbol, tokenId: tokenId, ratio: ratio);
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Signer>>
abstract class Signer implements RustOpaqueInterface {
  Contract createSignedContract({required Contract contract});

  Order createSignedOrder({required Order order});

  static Signer ethSigner({required String ethPrivateKey}) =>
      RustLib.instance.api
          .crateApiSignerEthSigner(ethPrivateKey: ethPrivateKey);

  String signAutoDeleveraging({required AutoDeleveraging tx});

  String signChangePubkeyWithCreate2DataAuth(
      {required ChangePubKey tx,
      required String creatorAddress,
      required String saltArg,
      required String codeHash});

  String signChangePubkeyWithEthEcdsaAuth({required ChangePubKey tx});

  String signChangePubkeyWithOnchain({required ChangePubKey tx});

  String signContractMatching({required ContractMatching tx});

  String signForcedExit({required ForcedExit tx});

  String signFunding({required Funding tx});

  String signLiquidation({required Liquidation tx});

  String signOrderMatching({required OrderMatching tx});

  String signTransfer(
      {required Transfer tx,
      required String tokenSymbol,
      String? chainId,
      String? addr});

  String signWithdraw(
      {required Withdraw tx,
      required String tokenSymbol,
      String? chainId,
      String? addr});

  static Signer starknetSigner(
          {required String ethPrivateKey,
          required String starknetChainId,
          required String starknetAddr}) =>
      RustLib.instance.api.crateApiSignerStarknetSigner(
          ethPrivateKey: ethPrivateKey,
          starknetChainId: starknetChainId,
          starknetAddr: starknetAddr);
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SpotPriceInfo>>
abstract class SpotPriceInfo implements RustOpaqueInterface {
  factory SpotPriceInfo({required int tokenId, required String price}) =>
      RustLib.instance.api
          .crateApiSpotPriceInfoNew(tokenId: tokenId, price: price);
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Transfer>>
abstract class Transfer implements RustOpaqueInterface {
  String getEthSignMsg({required String tokenSymbol});

  factory Transfer(
          {required int accountId,
          required String toAddress,
          required int fromSubAccountId,
          required int toSubAccountId,
          required int token,
          required String fee,
          required String amount,
          required int nonce,
          int? ts}) =>
      RustLib.instance.api.crateApiTransferNew(
          accountId: accountId,
          toAddress: toAddress,
          fromSubAccountId: fromSubAccountId,
          toSubAccountId: toSubAccountId,
          token: token,
          fee: fee,
          amount: amount,
          nonce: nonce,
          ts: ts);

  void sign({required ZkLinkSigner zkLinkSigner});

  String toJson();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UpdateGlobalVar>>
abstract class UpdateGlobalVar implements RustOpaqueInterface {
  factory UpdateGlobalVar(
          {required int fromChainId,
          required int subAccountId,
          required Parameter parameter,
          required double serialId}) =>
      RustLib.instance.api.crateApiUpdateGlobalVarNew(
          fromChainId: fromChainId,
          subAccountId: subAccountId,
          parameter: parameter,
          serialId: serialId);

  String toJson();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Wallet>>
abstract class Wallet implements RustOpaqueInterface {
  Future<String> approveErc20(
      {required String contract,
      required String amount,
      required EthTxOption ethParams});

  Future<String> depositErc20(
      {required int subAccountId,
      required String depositTo,
      required String tokenAddr,
      required String amount,
      required bool mapping,
      required EthTxOption ethParams,
      required bool isGateway});

  Future<String> depositEth(
      {required int subAccountId,
      required String depositTo,
      required EthTxOption ethParams,
      required bool isGateway});

  Future<String> fullExit(
      {required int accountId,
      required int subAccountId,
      required int tokenId,
      required bool mapping,
      required EthTxOption ethParams});

  Future<String> getBalance();

  Future<String> getDepositFee({required EthTxOption ethParams});

  Future<double> getNonce({required String blockNumber});

  factory Wallet({required String url, required String privateKey}) =>
      RustLib.instance.api.crateApiWalletNew(url: url, privateKey: privateKey);

  Future<String> setAuthPubkeyHash(
      {required double nonce,
      required String newPubkeyHash,
      required EthTxOption ethParams});

  Future<int> waitForTransaction({required String txHash, int? timeout});
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Withdraw>>
abstract class Withdraw implements RustOpaqueInterface {
  String getEthSignMsg({required String tokenSymbol});

  factory Withdraw(
          {required int accountId,
          required int subAccountId,
          required int toChainId,
          required String toAddress,
          required int l2SourceToken,
          required int l1TargetToken,
          required String amount,
          String? callData,
          required String fee,
          required int nonce,
          required bool withdrawToL1,
          required int withdrawFeeRatio,
          int? ts}) =>
      RustLib.instance.api.crateApiWithdrawNew(
          accountId: accountId,
          subAccountId: subAccountId,
          toChainId: toChainId,
          toAddress: toAddress,
          l2SourceToken: l2SourceToken,
          l1TargetToken: l1TargetToken,
          amount: amount,
          callData: callData,
          fee: fee,
          nonce: nonce,
          withdrawToL1: withdrawToL1,
          withdrawFeeRatio: withdrawFeeRatio,
          ts: ts);

  void sign({required ZkLinkSigner zkLinkSigner});

  String toJson();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ZkLinkSignature>>
abstract class ZkLinkSignature implements RustOpaqueInterface {
  String getPubkey();

  String getSignature();
}

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ZkLinkSigner>>
abstract class ZkLinkSigner implements RustOpaqueInterface {
  static ZkLinkSigner ethSig({required String sig}) =>
      RustLib.instance.api.crateApiZkLinkSignerEthSig(sig: sig);

  String getPubkey();

  String getPubkeyHash();

  ZkLinkSignature signMusig({required List<int> msg});

  static ZkLinkSigner starknetSig({required String sig}) =>
      RustLib.instance.api.crateApiZkLinkSignerStarknetSig(sig: sig);
}
