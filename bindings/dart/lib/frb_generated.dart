// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0';

  @override
  int get rustContentHash => -634235047;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'zklink_sdk_dart',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  AutoDeleveraging crateApiAutoDeleveragingNew(
      {required int accountId,
      required int subAccountId,
      required int subAccountNonce,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices,
      required int adlAccountId,
      required int pairId,
      required String adlSize,
      required String adlPrice,
      required String fee,
      required int feeToken});

  void crateApiAutoDeleveragingSign(
      {required AutoDeleveraging that, required ZkLinkSigner zkLinkSigner});

  String crateApiAutoDeleveragingToJson({required AutoDeleveraging that});

  String crateApiChangePubKeyGetEthSignMsg(
      {required ChangePubKey that, required int nonce, required int accountId});

  ChangePubKey crateApiChangePubKeyNew(
      {required int chainId,
      required int accountId,
      required int subAccountId,
      required String newPubkeyHash,
      required int feeToken,
      required String fee,
      required int nonce,
      String? ethSignature,
      int? ts});

  void crateApiChangePubKeySetEthAuthData(
      {required ChangePubKey that, required String sig});

  void crateApiChangePubKeySign(
      {required ChangePubKey that, required ZkLinkSigner zkLinkSigner});

  String crateApiChangePubKeyToEip712RequestPayload(
      {required ChangePubKey that,
      required int chainId,
      required String address});

  String crateApiChangePubKeyToJson({required ChangePubKey that});

  ContractMatching crateApiContractMatchingNew(
      {required int accountId,
      required int subAccountId,
      required Contract taker,
      required List<Contract> maker,
      required String fee,
      required int feeToken,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices});

  void crateApiContractMatchingSign(
      {required ContractMatching that, required ZkLinkSigner zkLinkSigner});

  String crateApiContractMatchingToJson({required ContractMatching that});

  ContractPrice crateApiContractPriceNew(
      {required int pairId, required String marketPrice});

  Contract crateApiContractNew(
      {required int accountId,
      required int subAccountId,
      required int slotId,
      required int nonce,
      required int pairId,
      required String size,
      required String price,
      required bool direction,
      required int makerFeeRate,
      required int takerFeeRate,
      required bool hasSubsidy});

  void crateApiContractSign(
      {required Contract that, required ZkLinkSigner zkLinkSigner});

  String crateApiContractToJson({required Contract that});

  EthTxOption crateApiEthTxOptionNew(
      {required bool isSupportEip1559,
      required String to,
      double? nonce,
      String? value,
      double? gas,
      String? gasPrice});

  ForcedExit crateApiForcedExitNew(
      {required int toChainId,
      required int initiatorAccountId,
      required int initiatorSubAccountId,
      required int targetSubAccountId,
      required String target,
      required int l2SourceToken,
      required int l1TargetToken,
      required String exitAmount,
      required int initiatorNonce,
      required bool withdrawToL1,
      int? ts});

  void crateApiForcedExitSign(
      {required ForcedExit that, required ZkLinkSigner zkLinkSigner});

  String crateApiForcedExitToJson({required ForcedExit that});

  FundingInfo crateApiFundingInfoNew(
      {required int pairId, required String price, required int fundingRate});

  Funding crateApiFundingNew(
      {required int accountId,
      required int subAccountId,
      required int subAccountNonce,
      required List<int> fundingAccountIds,
      required String fee,
      required int feeToken});

  void crateApiFundingSign(
      {required Funding that, required ZkLinkSigner zkLinkSigner});

  String crateApiFundingToJson({required Funding that});

  Liquidation crateApiLiquidationNew(
      {required int accountId,
      required int subAccountId,
      required int subAccountNonce,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices,
      required int liquidationAccountId,
      required String fee,
      required int feeToken});

  void crateApiLiquidationSign(
      {required Liquidation that, required ZkLinkSigner zkLinkSigner});

  String crateApiLiquidationToJson({required Liquidation that});

  OrderMatching crateApiOrderMatchingNew(
      {required int accountId,
      required int subAccountId,
      required Order taker,
      required Order maker,
      required String fee,
      required int feeToken,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices,
      required String expectBaseAmount,
      required String expectQuoteAmount});

  void crateApiOrderMatchingSign(
      {required OrderMatching that, required ZkLinkSigner zkLinkSigner});

  String crateApiOrderMatchingToJson({required OrderMatching that});

  Order crateApiOrderNew(
      {required int accountId,
      required int subAccountId,
      required int slotId,
      required int nonce,
      required int baseTokenId,
      required int quoteTokenId,
      required String amount,
      required String price,
      required bool isSell,
      required int makerFeeRate,
      required int takerFeeRate,
      required bool hasSubsidy});

  void crateApiOrderSign(
      {required Order that, required ZkLinkSigner zkLinkSigner});

  String crateApiOrderToJson({required Order that});

  Parameter crateApiParameterContractInfo(
      {required int pairId,
      required String symbol,
      required int initialMarginRate,
      required int maintenanceMarginRate});

  Parameter crateApiParameterFeeAccount({required int accountId});

  Parameter crateApiParameterFundingInfos({required List<FundingInfo> infos});

  Parameter crateApiParameterInsuranceFundAccount({required int accountId});

  Parameter crateApiParameterMarginInfo(
      {required int marginId,
      String? symbol,
      required int tokenId,
      required int ratio});

  Contract crateApiSignerCreateSignedContract(
      {required Signer that, required Contract contract});

  Order crateApiSignerCreateSignedOrder(
      {required Signer that, required Order order});

  Signer crateApiSignerEthSigner({required String ethPrivateKey});

  String crateApiSignerSignAutoDeleveraging(
      {required Signer that, required AutoDeleveraging tx});

  String crateApiSignerSignChangePubkeyWithCreate2DataAuth(
      {required Signer that,
      required ChangePubKey tx,
      required String creatorAddress,
      required String saltArg,
      required String codeHash});

  String crateApiSignerSignChangePubkeyWithEthEcdsaAuth(
      {required Signer that, required ChangePubKey tx});

  String crateApiSignerSignChangePubkeyWithOnchain(
      {required Signer that, required ChangePubKey tx});

  String crateApiSignerSignContractMatching(
      {required Signer that, required ContractMatching tx});

  String crateApiSignerSignForcedExit(
      {required Signer that, required ForcedExit tx});

  String crateApiSignerSignFunding({required Signer that, required Funding tx});

  String crateApiSignerSignLiquidation(
      {required Signer that, required Liquidation tx});

  String crateApiSignerSignOrderMatching(
      {required Signer that, required OrderMatching tx});

  String crateApiSignerSignTransfer(
      {required Signer that,
      required Transfer tx,
      required String tokenSymbol,
      String? chainId,
      String? addr});

  String crateApiSignerSignWithdraw(
      {required Signer that,
      required Withdraw tx,
      required String tokenSymbol,
      String? chainId,
      String? addr});

  Signer crateApiSignerStarknetSigner(
      {required String ethPrivateKey,
      required String starknetChainId,
      required String starknetAddr});

  SpotPriceInfo crateApiSpotPriceInfoNew(
      {required int tokenId, required String price});

  String crateApiTransferGetEthSignMsg(
      {required Transfer that, required String tokenSymbol});

  Transfer crateApiTransferNew(
      {required int accountId,
      required String toAddress,
      required int fromSubAccountId,
      required int toSubAccountId,
      required int token,
      required String fee,
      required String amount,
      required int nonce,
      int? ts});

  void crateApiTransferSign(
      {required Transfer that, required ZkLinkSigner zkLinkSigner});

  String crateApiTransferToJson({required Transfer that});

  UpdateGlobalVar crateApiUpdateGlobalVarNew(
      {required int fromChainId,
      required int subAccountId,
      required Parameter parameter,
      required double serialId});

  String crateApiUpdateGlobalVarToJson({required UpdateGlobalVar that});

  Future<String> crateApiWalletApproveErc20(
      {required Wallet that,
      required String contract,
      required String amount,
      required EthTxOption ethParams});

  Future<String> crateApiWalletDepositErc20(
      {required Wallet that,
      required int subAccountId,
      required String depositTo,
      required String tokenAddr,
      required String amount,
      required bool mapping,
      required EthTxOption ethParams,
      required bool isGateway});

  Future<String> crateApiWalletDepositEth(
      {required Wallet that,
      required int subAccountId,
      required String depositTo,
      required EthTxOption ethParams,
      required bool isGateway});

  Future<String> crateApiWalletFullExit(
      {required Wallet that,
      required int accountId,
      required int subAccountId,
      required int tokenId,
      required bool mapping,
      required EthTxOption ethParams});

  Future<String> crateApiWalletGetBalance({required Wallet that});

  Future<String> crateApiWalletGetDepositFee(
      {required Wallet that, required EthTxOption ethParams});

  Future<double> crateApiWalletGetNonce(
      {required Wallet that, required String blockNumber});

  Wallet crateApiWalletNew({required String url, required String privateKey});

  Future<String> crateApiWalletSetAuthPubkeyHash(
      {required Wallet that,
      required double nonce,
      required String newPubkeyHash,
      required EthTxOption ethParams});

  Future<int> crateApiWalletWaitForTransaction(
      {required Wallet that, required String txHash, int? timeout});

  String crateApiWithdrawGetEthSignMsg(
      {required Withdraw that, required String tokenSymbol});

  Withdraw crateApiWithdrawNew(
      {required int accountId,
      required int subAccountId,
      required int toChainId,
      required String toAddress,
      required int l2SourceToken,
      required int l1TargetToken,
      required String amount,
      String? callData,
      required String fee,
      required int nonce,
      required bool withdrawToL1,
      required int withdrawFeeRatio,
      int? ts});

  void crateApiWithdrawSign(
      {required Withdraw that, required ZkLinkSigner zkLinkSigner});

  String crateApiWithdrawToJson({required Withdraw that});

  String crateApiZkLinkSignatureGetPubkey({required ZkLinkSignature that});

  String crateApiZkLinkSignatureGetSignature({required ZkLinkSignature that});

  ZkLinkSigner crateApiZkLinkSignerEthSig({required String sig});

  String crateApiZkLinkSignerGetPubkey({required ZkLinkSigner that});

  String crateApiZkLinkSignerGetPubkeyHash({required ZkLinkSigner that});

  ZkLinkSignature crateApiZkLinkSignerSignMusig(
      {required ZkLinkSigner that, required List<int> msg});

  ZkLinkSigner crateApiZkLinkSignerStarknetSig({required String sig});

  String crateApiClosestPackableFeeAmount({required String fee});

  String crateApiClosestPackableTokenAmount({required String amount});

  Future<void> crateApiInitApp();

  bool crateApiIsFeeAmountPackable({required String fee});

  bool crateApiIsTokenAmountPackable({required String amount});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AutoDeleveraging;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AutoDeleveraging;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AutoDeleveragingPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChangePubKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChangePubKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ChangePubKeyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Contract;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Contract;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ContractPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ContractMatching;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ContractMatching;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ContractMatchingPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ContractPrice;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ContractPrice;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ContractPricePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EthTxOption;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EthTxOption;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EthTxOptionPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ForcedExit;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ForcedExit;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ForcedExitPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Funding;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Funding;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FundingPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FundingInfo;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FundingInfo;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FundingInfoPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Liquidation;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Liquidation;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_LiquidationPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Order;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Order;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OrderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OrderMatching;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OrderMatching;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OrderMatchingPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Parameter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Parameter;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ParameterPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Signer;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Signer;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SignerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SpotPriceInfo;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SpotPriceInfo;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SpotPriceInfoPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Transfer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Transfer;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TransferPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UpdateGlobalVar;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UpdateGlobalVar;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_UpdateGlobalVarPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Wallet;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Wallet;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WalletPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Withdraw;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Withdraw;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WithdrawPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ZkLinkSignature;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ZkLinkSignature;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ZkLinkSignaturePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ZkLinkSigner;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ZkLinkSigner;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ZkLinkSignerPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  AutoDeleveraging crateApiAutoDeleveragingNew(
      {required int accountId,
      required int subAccountId,
      required int subAccountNonce,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices,
      required int adlAccountId,
      required int pairId,
      required String adlSize,
      required String adlPrice,
      required String fee,
      required int feeToken}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_u_32(subAccountNonce);
        var arg3 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
                contractPrices);
        var arg4 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
                marginPrices);
        var arg5 = cst_encode_u_32(adlAccountId);
        var arg6 = cst_encode_u_16(pairId);
        var arg7 = cst_encode_String(adlSize);
        var arg8 = cst_encode_String(adlPrice);
        var arg9 = cst_encode_String(fee);
        var arg10 = cst_encode_u_16(feeToken);
        return wire.wire__crate__api__AutoDeleveraging_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiAutoDeleveragingNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        subAccountNonce,
        contractPrices,
        marginPrices,
        adlAccountId,
        pairId,
        adlSize,
        adlPrice,
        fee,
        feeToken
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAutoDeleveragingNewConstMeta =>
      const TaskConstMeta(
        debugName: "AutoDeleveraging_new",
        argNames: [
          "accountId",
          "subAccountId",
          "subAccountNonce",
          "contractPrices",
          "marginPrices",
          "adlAccountId",
          "pairId",
          "adlSize",
          "adlPrice",
          "fee",
          "feeToken"
        ],
      );

  @override
  void crateApiAutoDeleveragingSign(
      {required AutoDeleveraging that, required ZkLinkSigner zkLinkSigner}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
                zkLinkSigner);
        return wire.wire__crate__api__AutoDeleveraging_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiAutoDeleveragingSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAutoDeleveragingSignConstMeta =>
      const TaskConstMeta(
        debugName: "AutoDeleveraging_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String crateApiAutoDeleveragingToJson({required AutoDeleveraging that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
                that);
        return wire.wire__crate__api__AutoDeleveraging_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiAutoDeleveragingToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAutoDeleveragingToJsonConstMeta =>
      const TaskConstMeta(
        debugName: "AutoDeleveraging_to_json",
        argNames: ["that"],
      );

  @override
  String crateApiChangePubKeyGetEthSignMsg(
      {required ChangePubKey that,
      required int nonce,
      required int accountId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
                that);
        var arg1 = cst_encode_u_32(nonce);
        var arg2 = cst_encode_u_32(accountId);
        return wire.wire__crate__api__ChangePubKey_get_eth_sign_msg(
            arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiChangePubKeyGetEthSignMsgConstMeta,
      argValues: [that, nonce, accountId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChangePubKeyGetEthSignMsgConstMeta =>
      const TaskConstMeta(
        debugName: "ChangePubKey_get_eth_sign_msg",
        argNames: ["that", "nonce", "accountId"],
      );

  @override
  ChangePubKey crateApiChangePubKeyNew(
      {required int chainId,
      required int accountId,
      required int subAccountId,
      required String newPubkeyHash,
      required int feeToken,
      required String fee,
      required int nonce,
      String? ethSignature,
      int? ts}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8(chainId);
        var arg1 = cst_encode_u_32(accountId);
        var arg2 = cst_encode_u_8(subAccountId);
        var arg3 = cst_encode_String(newPubkeyHash);
        var arg4 = cst_encode_u_32(feeToken);
        var arg5 = cst_encode_String(fee);
        var arg6 = cst_encode_u_32(nonce);
        var arg7 = cst_encode_opt_String(ethSignature);
        var arg8 = cst_encode_opt_box_autoadd_u_32(ts);
        return wire.wire__crate__api__ChangePubKey_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiChangePubKeyNewConstMeta,
      argValues: [
        chainId,
        accountId,
        subAccountId,
        newPubkeyHash,
        feeToken,
        fee,
        nonce,
        ethSignature,
        ts
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChangePubKeyNewConstMeta => const TaskConstMeta(
        debugName: "ChangePubKey_new",
        argNames: [
          "chainId",
          "accountId",
          "subAccountId",
          "newPubkeyHash",
          "feeToken",
          "fee",
          "nonce",
          "ethSignature",
          "ts"
        ],
      );

  @override
  void crateApiChangePubKeySetEthAuthData(
      {required ChangePubKey that, required String sig}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
                that);
        var arg1 = cst_encode_String(sig);
        return wire.wire__crate__api__ChangePubKey_set_eth_auth_data(
            arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiChangePubKeySetEthAuthDataConstMeta,
      argValues: [that, sig],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChangePubKeySetEthAuthDataConstMeta =>
      const TaskConstMeta(
        debugName: "ChangePubKey_set_eth_auth_data",
        argNames: ["that", "sig"],
      );

  @override
  void crateApiChangePubKeySign(
      {required ChangePubKey that, required ZkLinkSigner zkLinkSigner}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
                zkLinkSigner);
        return wire.wire__crate__api__ChangePubKey_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiChangePubKeySignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChangePubKeySignConstMeta => const TaskConstMeta(
        debugName: "ChangePubKey_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String crateApiChangePubKeyToEip712RequestPayload(
      {required ChangePubKey that,
      required int chainId,
      required String address}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
                that);
        var arg1 = cst_encode_u_32(chainId);
        var arg2 = cst_encode_String(address);
        return wire.wire__crate__api__ChangePubKey_to_eip712_request_payload(
            arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiChangePubKeyToEip712RequestPayloadConstMeta,
      argValues: [that, chainId, address],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChangePubKeyToEip712RequestPayloadConstMeta =>
      const TaskConstMeta(
        debugName: "ChangePubKey_to_eip712_request_payload",
        argNames: ["that", "chainId", "address"],
      );

  @override
  String crateApiChangePubKeyToJson({required ChangePubKey that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
                that);
        return wire.wire__crate__api__ChangePubKey_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiChangePubKeyToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiChangePubKeyToJsonConstMeta => const TaskConstMeta(
        debugName: "ChangePubKey_to_json",
        argNames: ["that"],
      );

  @override
  ContractMatching crateApiContractMatchingNew(
      {required int accountId,
      required int subAccountId,
      required Contract taker,
      required List<Contract> maker,
      required String fee,
      required int feeToken,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
                taker);
        var arg3 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
                maker);
        var arg4 = cst_encode_String(fee);
        var arg5 = cst_encode_u_16(feeToken);
        var arg6 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
                contractPrices);
        var arg7 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
                marginPrices);
        return wire.wire__crate__api__ContractMatching_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiContractMatchingNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        taker,
        maker,
        fee,
        feeToken,
        contractPrices,
        marginPrices
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiContractMatchingNewConstMeta =>
      const TaskConstMeta(
        debugName: "ContractMatching_new",
        argNames: [
          "accountId",
          "subAccountId",
          "taker",
          "maker",
          "fee",
          "feeToken",
          "contractPrices",
          "marginPrices"
        ],
      );

  @override
  void crateApiContractMatchingSign(
      {required ContractMatching that, required ZkLinkSigner zkLinkSigner}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
                zkLinkSigner);
        return wire.wire__crate__api__ContractMatching_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiContractMatchingSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiContractMatchingSignConstMeta =>
      const TaskConstMeta(
        debugName: "ContractMatching_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String crateApiContractMatchingToJson({required ContractMatching that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
                that);
        return wire.wire__crate__api__ContractMatching_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiContractMatchingToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiContractMatchingToJsonConstMeta =>
      const TaskConstMeta(
        debugName: "ContractMatching_to_json",
        argNames: ["that"],
      );

  @override
  ContractPrice crateApiContractPriceNew(
      {required int pairId, required String marketPrice}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_16(pairId);
        var arg1 = cst_encode_String(marketPrice);
        return wire.wire__crate__api__ContractPrice_new(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiContractPriceNewConstMeta,
      argValues: [pairId, marketPrice],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiContractPriceNewConstMeta => const TaskConstMeta(
        debugName: "ContractPrice_new",
        argNames: ["pairId", "marketPrice"],
      );

  @override
  Contract crateApiContractNew(
      {required int accountId,
      required int subAccountId,
      required int slotId,
      required int nonce,
      required int pairId,
      required String size,
      required String price,
      required bool direction,
      required int makerFeeRate,
      required int takerFeeRate,
      required bool hasSubsidy}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_u_32(slotId);
        var arg3 = cst_encode_u_32(nonce);
        var arg4 = cst_encode_u_16(pairId);
        var arg5 = cst_encode_String(size);
        var arg6 = cst_encode_String(price);
        var arg7 = cst_encode_bool(direction);
        var arg8 = cst_encode_u_8(makerFeeRate);
        var arg9 = cst_encode_u_8(takerFeeRate);
        var arg10 = cst_encode_bool(hasSubsidy);
        return wire.wire__crate__api__Contract_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiContractNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        slotId,
        nonce,
        pairId,
        size,
        price,
        direction,
        makerFeeRate,
        takerFeeRate,
        hasSubsidy
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiContractNewConstMeta => const TaskConstMeta(
        debugName: "Contract_new",
        argNames: [
          "accountId",
          "subAccountId",
          "slotId",
          "nonce",
          "pairId",
          "size",
          "price",
          "direction",
          "makerFeeRate",
          "takerFeeRate",
          "hasSubsidy"
        ],
      );

  @override
  void crateApiContractSign(
      {required Contract that, required ZkLinkSigner zkLinkSigner}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
                zkLinkSigner);
        return wire.wire__crate__api__Contract_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiContractSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiContractSignConstMeta => const TaskConstMeta(
        debugName: "Contract_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String crateApiContractToJson({required Contract that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
                that);
        return wire.wire__crate__api__Contract_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiContractToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiContractToJsonConstMeta => const TaskConstMeta(
        debugName: "Contract_to_json",
        argNames: ["that"],
      );

  @override
  EthTxOption crateApiEthTxOptionNew(
      {required bool isSupportEip1559,
      required String to,
      double? nonce,
      String? value,
      double? gas,
      String? gasPrice}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_bool(isSupportEip1559);
        var arg1 = cst_encode_String(to);
        var arg2 = cst_encode_opt_box_autoadd_f_64(nonce);
        var arg3 = cst_encode_opt_String(value);
        var arg4 = cst_encode_opt_box_autoadd_f_64(gas);
        var arg5 = cst_encode_opt_String(gasPrice);
        return wire.wire__crate__api__EthTxOption_new(
            arg0, arg1, arg2, arg3, arg4, arg5);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiEthTxOptionNewConstMeta,
      argValues: [isSupportEip1559, to, nonce, value, gas, gasPrice],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEthTxOptionNewConstMeta => const TaskConstMeta(
        debugName: "EthTxOption_new",
        argNames: [
          "isSupportEip1559",
          "to",
          "nonce",
          "value",
          "gas",
          "gasPrice"
        ],
      );

  @override
  ForcedExit crateApiForcedExitNew(
      {required int toChainId,
      required int initiatorAccountId,
      required int initiatorSubAccountId,
      required int targetSubAccountId,
      required String target,
      required int l2SourceToken,
      required int l1TargetToken,
      required String exitAmount,
      required int initiatorNonce,
      required bool withdrawToL1,
      int? ts}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8(toChainId);
        var arg1 = cst_encode_u_32(initiatorAccountId);
        var arg2 = cst_encode_u_8(initiatorSubAccountId);
        var arg3 = cst_encode_u_8(targetSubAccountId);
        var arg4 = cst_encode_String(target);
        var arg5 = cst_encode_u_32(l2SourceToken);
        var arg6 = cst_encode_u_32(l1TargetToken);
        var arg7 = cst_encode_String(exitAmount);
        var arg8 = cst_encode_u_32(initiatorNonce);
        var arg9 = cst_encode_bool(withdrawToL1);
        var arg10 = cst_encode_opt_box_autoadd_u_32(ts);
        return wire.wire__crate__api__ForcedExit_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiForcedExitNewConstMeta,
      argValues: [
        toChainId,
        initiatorAccountId,
        initiatorSubAccountId,
        targetSubAccountId,
        target,
        l2SourceToken,
        l1TargetToken,
        exitAmount,
        initiatorNonce,
        withdrawToL1,
        ts
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiForcedExitNewConstMeta => const TaskConstMeta(
        debugName: "ForcedExit_new",
        argNames: [
          "toChainId",
          "initiatorAccountId",
          "initiatorSubAccountId",
          "targetSubAccountId",
          "target",
          "l2SourceToken",
          "l1TargetToken",
          "exitAmount",
          "initiatorNonce",
          "withdrawToL1",
          "ts"
        ],
      );

  @override
  void crateApiForcedExitSign(
      {required ForcedExit that, required ZkLinkSigner zkLinkSigner}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
                zkLinkSigner);
        return wire.wire__crate__api__ForcedExit_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiForcedExitSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiForcedExitSignConstMeta => const TaskConstMeta(
        debugName: "ForcedExit_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String crateApiForcedExitToJson({required ForcedExit that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
                that);
        return wire.wire__crate__api__ForcedExit_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiForcedExitToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiForcedExitToJsonConstMeta => const TaskConstMeta(
        debugName: "ForcedExit_to_json",
        argNames: ["that"],
      );

  @override
  FundingInfo crateApiFundingInfoNew(
      {required int pairId, required String price, required int fundingRate}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_16(pairId);
        var arg1 = cst_encode_String(price);
        var arg2 = cst_encode_i_16(fundingRate);
        return wire.wire__crate__api__FundingInfo_new(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiFundingInfoNewConstMeta,
      argValues: [pairId, price, fundingRate],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFundingInfoNewConstMeta => const TaskConstMeta(
        debugName: "FundingInfo_new",
        argNames: ["pairId", "price", "fundingRate"],
      );

  @override
  Funding crateApiFundingNew(
      {required int accountId,
      required int subAccountId,
      required int subAccountNonce,
      required List<int> fundingAccountIds,
      required String fee,
      required int feeToken}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_u_32(subAccountNonce);
        var arg3 = cst_encode_list_prim_u_32_loose(fundingAccountIds);
        var arg4 = cst_encode_String(fee);
        var arg5 = cst_encode_u_16(feeToken);
        return wire.wire__crate__api__Funding_new(
            arg0, arg1, arg2, arg3, arg4, arg5);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiFundingNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        subAccountNonce,
        fundingAccountIds,
        fee,
        feeToken
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFundingNewConstMeta => const TaskConstMeta(
        debugName: "Funding_new",
        argNames: [
          "accountId",
          "subAccountId",
          "subAccountNonce",
          "fundingAccountIds",
          "fee",
          "feeToken"
        ],
      );

  @override
  void crateApiFundingSign(
      {required Funding that, required ZkLinkSigner zkLinkSigner}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
                zkLinkSigner);
        return wire.wire__crate__api__Funding_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiFundingSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFundingSignConstMeta => const TaskConstMeta(
        debugName: "Funding_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String crateApiFundingToJson({required Funding that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
                that);
        return wire.wire__crate__api__Funding_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiFundingToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFundingToJsonConstMeta => const TaskConstMeta(
        debugName: "Funding_to_json",
        argNames: ["that"],
      );

  @override
  Liquidation crateApiLiquidationNew(
      {required int accountId,
      required int subAccountId,
      required int subAccountNonce,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices,
      required int liquidationAccountId,
      required String fee,
      required int feeToken}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_u_32(subAccountNonce);
        var arg3 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
                contractPrices);
        var arg4 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
                marginPrices);
        var arg5 = cst_encode_u_32(liquidationAccountId);
        var arg6 = cst_encode_String(fee);
        var arg7 = cst_encode_u_16(feeToken);
        return wire.wire__crate__api__Liquidation_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiLiquidationNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        subAccountNonce,
        contractPrices,
        marginPrices,
        liquidationAccountId,
        fee,
        feeToken
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLiquidationNewConstMeta => const TaskConstMeta(
        debugName: "Liquidation_new",
        argNames: [
          "accountId",
          "subAccountId",
          "subAccountNonce",
          "contractPrices",
          "marginPrices",
          "liquidationAccountId",
          "fee",
          "feeToken"
        ],
      );

  @override
  void crateApiLiquidationSign(
      {required Liquidation that, required ZkLinkSigner zkLinkSigner}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
                zkLinkSigner);
        return wire.wire__crate__api__Liquidation_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiLiquidationSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLiquidationSignConstMeta => const TaskConstMeta(
        debugName: "Liquidation_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String crateApiLiquidationToJson({required Liquidation that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
                that);
        return wire.wire__crate__api__Liquidation_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiLiquidationToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLiquidationToJsonConstMeta => const TaskConstMeta(
        debugName: "Liquidation_to_json",
        argNames: ["that"],
      );

  @override
  OrderMatching crateApiOrderMatchingNew(
      {required int accountId,
      required int subAccountId,
      required Order taker,
      required Order maker,
      required String fee,
      required int feeToken,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices,
      required String expectBaseAmount,
      required String expectQuoteAmount}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
                taker);
        var arg3 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
                maker);
        var arg4 = cst_encode_String(fee);
        var arg5 = cst_encode_u_32(feeToken);
        var arg6 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
                contractPrices);
        var arg7 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
                marginPrices);
        var arg8 = cst_encode_String(expectBaseAmount);
        var arg9 = cst_encode_String(expectQuoteAmount);
        return wire.wire__crate__api__OrderMatching_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiOrderMatchingNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        taker,
        maker,
        fee,
        feeToken,
        contractPrices,
        marginPrices,
        expectBaseAmount,
        expectQuoteAmount
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOrderMatchingNewConstMeta => const TaskConstMeta(
        debugName: "OrderMatching_new",
        argNames: [
          "accountId",
          "subAccountId",
          "taker",
          "maker",
          "fee",
          "feeToken",
          "contractPrices",
          "marginPrices",
          "expectBaseAmount",
          "expectQuoteAmount"
        ],
      );

  @override
  void crateApiOrderMatchingSign(
      {required OrderMatching that, required ZkLinkSigner zkLinkSigner}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
                zkLinkSigner);
        return wire.wire__crate__api__OrderMatching_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiOrderMatchingSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOrderMatchingSignConstMeta => const TaskConstMeta(
        debugName: "OrderMatching_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String crateApiOrderMatchingToJson({required OrderMatching that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
                that);
        return wire.wire__crate__api__OrderMatching_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiOrderMatchingToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOrderMatchingToJsonConstMeta =>
      const TaskConstMeta(
        debugName: "OrderMatching_to_json",
        argNames: ["that"],
      );

  @override
  Order crateApiOrderNew(
      {required int accountId,
      required int subAccountId,
      required int slotId,
      required int nonce,
      required int baseTokenId,
      required int quoteTokenId,
      required String amount,
      required String price,
      required bool isSell,
      required int makerFeeRate,
      required int takerFeeRate,
      required bool hasSubsidy}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_u_32(slotId);
        var arg3 = cst_encode_u_32(nonce);
        var arg4 = cst_encode_u_32(baseTokenId);
        var arg5 = cst_encode_u_32(quoteTokenId);
        var arg6 = cst_encode_String(amount);
        var arg7 = cst_encode_String(price);
        var arg8 = cst_encode_bool(isSell);
        var arg9 = cst_encode_u_8(makerFeeRate);
        var arg10 = cst_encode_u_8(takerFeeRate);
        var arg11 = cst_encode_bool(hasSubsidy);
        return wire.wire__crate__api__Order_new(arg0, arg1, arg2, arg3, arg4,
            arg5, arg6, arg7, arg8, arg9, arg10, arg11);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiOrderNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        slotId,
        nonce,
        baseTokenId,
        quoteTokenId,
        amount,
        price,
        isSell,
        makerFeeRate,
        takerFeeRate,
        hasSubsidy
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOrderNewConstMeta => const TaskConstMeta(
        debugName: "Order_new",
        argNames: [
          "accountId",
          "subAccountId",
          "slotId",
          "nonce",
          "baseTokenId",
          "quoteTokenId",
          "amount",
          "price",
          "isSell",
          "makerFeeRate",
          "takerFeeRate",
          "hasSubsidy"
        ],
      );

  @override
  void crateApiOrderSign(
      {required Order that, required ZkLinkSigner zkLinkSigner}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
                zkLinkSigner);
        return wire.wire__crate__api__Order_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiOrderSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOrderSignConstMeta => const TaskConstMeta(
        debugName: "Order_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String crateApiOrderToJson({required Order that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
                that);
        return wire.wire__crate__api__Order_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiOrderToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiOrderToJsonConstMeta => const TaskConstMeta(
        debugName: "Order_to_json",
        argNames: ["that"],
      );

  @override
  Parameter crateApiParameterContractInfo(
      {required int pairId,
      required String symbol,
      required int initialMarginRate,
      required int maintenanceMarginRate}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_16(pairId);
        var arg1 = cst_encode_String(symbol);
        var arg2 = cst_encode_u_16(initialMarginRate);
        var arg3 = cst_encode_u_16(maintenanceMarginRate);
        return wire.wire__crate__api__Parameter_contract_info(
            arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiParameterContractInfoConstMeta,
      argValues: [pairId, symbol, initialMarginRate, maintenanceMarginRate],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiParameterContractInfoConstMeta =>
      const TaskConstMeta(
        debugName: "Parameter_contract_info",
        argNames: [
          "pairId",
          "symbol",
          "initialMarginRate",
          "maintenanceMarginRate"
        ],
      );

  @override
  Parameter crateApiParameterFeeAccount({required int accountId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        return wire.wire__crate__api__Parameter_fee_account(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiParameterFeeAccountConstMeta,
      argValues: [accountId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiParameterFeeAccountConstMeta =>
      const TaskConstMeta(
        debugName: "Parameter_fee_account",
        argNames: ["accountId"],
      );

  @override
  Parameter crateApiParameterFundingInfos({required List<FundingInfo> infos}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo(
                infos);
        return wire.wire__crate__api__Parameter_funding_infos(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiParameterFundingInfosConstMeta,
      argValues: [infos],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiParameterFundingInfosConstMeta =>
      const TaskConstMeta(
        debugName: "Parameter_funding_infos",
        argNames: ["infos"],
      );

  @override
  Parameter crateApiParameterInsuranceFundAccount({required int accountId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        return wire.wire__crate__api__Parameter_insurance_fund_account(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiParameterInsuranceFundAccountConstMeta,
      argValues: [accountId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiParameterInsuranceFundAccountConstMeta =>
      const TaskConstMeta(
        debugName: "Parameter_insurance_fund_account",
        argNames: ["accountId"],
      );

  @override
  Parameter crateApiParameterMarginInfo(
      {required int marginId,
      String? symbol,
      required int tokenId,
      required int ratio}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8(marginId);
        var arg1 = cst_encode_opt_String(symbol);
        var arg2 = cst_encode_u_32(tokenId);
        var arg3 = cst_encode_u_8(ratio);
        return wire.wire__crate__api__Parameter_margin_info(
            arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiParameterMarginInfoConstMeta,
      argValues: [marginId, symbol, tokenId, ratio],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiParameterMarginInfoConstMeta =>
      const TaskConstMeta(
        debugName: "Parameter_margin_info",
        argNames: ["marginId", "symbol", "tokenId", "ratio"],
      );

  @override
  Contract crateApiSignerCreateSignedContract(
      {required Signer that, required Contract contract}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
                contract);
        return wire.wire__crate__api__Signer_create_signed_contract(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSignerCreateSignedContractConstMeta,
      argValues: [that, contract],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSignerCreateSignedContractConstMeta =>
      const TaskConstMeta(
        debugName: "Signer_create_signed_contract",
        argNames: ["that", "contract"],
      );

  @override
  Order crateApiSignerCreateSignedOrder(
      {required Signer that, required Order order}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
                order);
        return wire.wire__crate__api__Signer_create_signed_order(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSignerCreateSignedOrderConstMeta,
      argValues: [that, order],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSignerCreateSignedOrderConstMeta =>
      const TaskConstMeta(
        debugName: "Signer_create_signed_order",
        argNames: ["that", "order"],
      );

  @override
  Signer crateApiSignerEthSigner({required String ethPrivateKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(ethPrivateKey);
        return wire.wire__crate__api__Signer_eth_signer(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSignerEthSignerConstMeta,
      argValues: [ethPrivateKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSignerEthSignerConstMeta => const TaskConstMeta(
        debugName: "Signer_eth_signer",
        argNames: ["ethPrivateKey"],
      );

  @override
  String crateApiSignerSignAutoDeleveraging(
      {required Signer that, required AutoDeleveraging tx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
                tx);
        return wire.wire__crate__api__Signer_sign_auto_deleveraging(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSignerSignAutoDeleveragingConstMeta,
      argValues: [that, tx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSignerSignAutoDeleveragingConstMeta =>
      const TaskConstMeta(
        debugName: "Signer_sign_auto_deleveraging",
        argNames: ["that", "tx"],
      );

  @override
  String crateApiSignerSignChangePubkeyWithCreate2DataAuth(
      {required Signer that,
      required ChangePubKey tx,
      required String creatorAddress,
      required String saltArg,
      required String codeHash}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
                tx);
        var arg2 = cst_encode_String(creatorAddress);
        var arg3 = cst_encode_String(saltArg);
        var arg4 = cst_encode_String(codeHash);
        return wire
            .wire__crate__api__Signer_sign_change_pubkey_with_create2data_auth(
                arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSignerSignChangePubkeyWithCreate2DataAuthConstMeta,
      argValues: [that, tx, creatorAddress, saltArg, codeHash],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSignerSignChangePubkeyWithCreate2DataAuthConstMeta =>
          const TaskConstMeta(
            debugName: "Signer_sign_change_pubkey_with_create2data_auth",
            argNames: ["that", "tx", "creatorAddress", "saltArg", "codeHash"],
          );

  @override
  String crateApiSignerSignChangePubkeyWithEthEcdsaAuth(
      {required Signer that, required ChangePubKey tx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
                tx);
        return wire
            .wire__crate__api__Signer_sign_change_pubkey_with_eth_ecdsa_auth(
                arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSignerSignChangePubkeyWithEthEcdsaAuthConstMeta,
      argValues: [that, tx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSignerSignChangePubkeyWithEthEcdsaAuthConstMeta =>
      const TaskConstMeta(
        debugName: "Signer_sign_change_pubkey_with_eth_ecdsa_auth",
        argNames: ["that", "tx"],
      );

  @override
  String crateApiSignerSignChangePubkeyWithOnchain(
      {required Signer that, required ChangePubKey tx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
                tx);
        return wire.wire__crate__api__Signer_sign_change_pubkey_with_onchain(
            arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSignerSignChangePubkeyWithOnchainConstMeta,
      argValues: [that, tx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSignerSignChangePubkeyWithOnchainConstMeta =>
      const TaskConstMeta(
        debugName: "Signer_sign_change_pubkey_with_onchain",
        argNames: ["that", "tx"],
      );

  @override
  String crateApiSignerSignContractMatching(
      {required Signer that, required ContractMatching tx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
                tx);
        return wire.wire__crate__api__Signer_sign_contract_matching(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSignerSignContractMatchingConstMeta,
      argValues: [that, tx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSignerSignContractMatchingConstMeta =>
      const TaskConstMeta(
        debugName: "Signer_sign_contract_matching",
        argNames: ["that", "tx"],
      );

  @override
  String crateApiSignerSignForcedExit(
      {required Signer that, required ForcedExit tx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
                tx);
        return wire.wire__crate__api__Signer_sign_forced_exit(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSignerSignForcedExitConstMeta,
      argValues: [that, tx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSignerSignForcedExitConstMeta =>
      const TaskConstMeta(
        debugName: "Signer_sign_forced_exit",
        argNames: ["that", "tx"],
      );

  @override
  String crateApiSignerSignFunding(
      {required Signer that, required Funding tx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
                tx);
        return wire.wire__crate__api__Signer_sign_funding(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSignerSignFundingConstMeta,
      argValues: [that, tx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSignerSignFundingConstMeta => const TaskConstMeta(
        debugName: "Signer_sign_funding",
        argNames: ["that", "tx"],
      );

  @override
  String crateApiSignerSignLiquidation(
      {required Signer that, required Liquidation tx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
                tx);
        return wire.wire__crate__api__Signer_sign_liquidation(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSignerSignLiquidationConstMeta,
      argValues: [that, tx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSignerSignLiquidationConstMeta =>
      const TaskConstMeta(
        debugName: "Signer_sign_liquidation",
        argNames: ["that", "tx"],
      );

  @override
  String crateApiSignerSignOrderMatching(
      {required Signer that, required OrderMatching tx}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
                tx);
        return wire.wire__crate__api__Signer_sign_order_matching(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSignerSignOrderMatchingConstMeta,
      argValues: [that, tx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSignerSignOrderMatchingConstMeta =>
      const TaskConstMeta(
        debugName: "Signer_sign_order_matching",
        argNames: ["that", "tx"],
      );

  @override
  String crateApiSignerSignTransfer(
      {required Signer that,
      required Transfer tx,
      required String tokenSymbol,
      String? chainId,
      String? addr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
                tx);
        var arg2 = cst_encode_String(tokenSymbol);
        var arg3 = cst_encode_opt_String(chainId);
        var arg4 = cst_encode_opt_String(addr);
        return wire.wire__crate__api__Signer_sign_transfer(
            arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSignerSignTransferConstMeta,
      argValues: [that, tx, tokenSymbol, chainId, addr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSignerSignTransferConstMeta => const TaskConstMeta(
        debugName: "Signer_sign_transfer",
        argNames: ["that", "tx", "tokenSymbol", "chainId", "addr"],
      );

  @override
  String crateApiSignerSignWithdraw(
      {required Signer that,
      required Withdraw tx,
      required String tokenSymbol,
      String? chainId,
      String? addr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
                tx);
        var arg2 = cst_encode_String(tokenSymbol);
        var arg3 = cst_encode_opt_String(chainId);
        var arg4 = cst_encode_opt_String(addr);
        return wire.wire__crate__api__Signer_sign_withdraw(
            arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSignerSignWithdrawConstMeta,
      argValues: [that, tx, tokenSymbol, chainId, addr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSignerSignWithdrawConstMeta => const TaskConstMeta(
        debugName: "Signer_sign_withdraw",
        argNames: ["that", "tx", "tokenSymbol", "chainId", "addr"],
      );

  @override
  Signer crateApiSignerStarknetSigner(
      {required String ethPrivateKey,
      required String starknetChainId,
      required String starknetAddr}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(ethPrivateKey);
        var arg1 = cst_encode_String(starknetChainId);
        var arg2 = cst_encode_String(starknetAddr);
        return wire.wire__crate__api__Signer_starknet_signer(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSignerStarknetSignerConstMeta,
      argValues: [ethPrivateKey, starknetChainId, starknetAddr],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSignerStarknetSignerConstMeta =>
      const TaskConstMeta(
        debugName: "Signer_starknet_signer",
        argNames: ["ethPrivateKey", "starknetChainId", "starknetAddr"],
      );

  @override
  SpotPriceInfo crateApiSpotPriceInfoNew(
      {required int tokenId, required String price}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(tokenId);
        var arg1 = cst_encode_String(price);
        return wire.wire__crate__api__SpotPriceInfo_new(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiSpotPriceInfoNewConstMeta,
      argValues: [tokenId, price],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSpotPriceInfoNewConstMeta => const TaskConstMeta(
        debugName: "SpotPriceInfo_new",
        argNames: ["tokenId", "price"],
      );

  @override
  String crateApiTransferGetEthSignMsg(
      {required Transfer that, required String tokenSymbol}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
                that);
        var arg1 = cst_encode_String(tokenSymbol);
        return wire.wire__crate__api__Transfer_get_eth_sign_msg(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiTransferGetEthSignMsgConstMeta,
      argValues: [that, tokenSymbol],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTransferGetEthSignMsgConstMeta =>
      const TaskConstMeta(
        debugName: "Transfer_get_eth_sign_msg",
        argNames: ["that", "tokenSymbol"],
      );

  @override
  Transfer crateApiTransferNew(
      {required int accountId,
      required String toAddress,
      required int fromSubAccountId,
      required int toSubAccountId,
      required int token,
      required String fee,
      required String amount,
      required int nonce,
      int? ts}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_String(toAddress);
        var arg2 = cst_encode_u_8(fromSubAccountId);
        var arg3 = cst_encode_u_8(toSubAccountId);
        var arg4 = cst_encode_u_32(token);
        var arg5 = cst_encode_String(fee);
        var arg6 = cst_encode_String(amount);
        var arg7 = cst_encode_u_32(nonce);
        var arg8 = cst_encode_opt_box_autoadd_u_32(ts);
        return wire.wire__crate__api__Transfer_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiTransferNewConstMeta,
      argValues: [
        accountId,
        toAddress,
        fromSubAccountId,
        toSubAccountId,
        token,
        fee,
        amount,
        nonce,
        ts
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTransferNewConstMeta => const TaskConstMeta(
        debugName: "Transfer_new",
        argNames: [
          "accountId",
          "toAddress",
          "fromSubAccountId",
          "toSubAccountId",
          "token",
          "fee",
          "amount",
          "nonce",
          "ts"
        ],
      );

  @override
  void crateApiTransferSign(
      {required Transfer that, required ZkLinkSigner zkLinkSigner}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
                zkLinkSigner);
        return wire.wire__crate__api__Transfer_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiTransferSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTransferSignConstMeta => const TaskConstMeta(
        debugName: "Transfer_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String crateApiTransferToJson({required Transfer that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
                that);
        return wire.wire__crate__api__Transfer_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiTransferToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiTransferToJsonConstMeta => const TaskConstMeta(
        debugName: "Transfer_to_json",
        argNames: ["that"],
      );

  @override
  UpdateGlobalVar crateApiUpdateGlobalVarNew(
      {required int fromChainId,
      required int subAccountId,
      required Parameter parameter,
      required double serialId}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8(fromChainId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter(
                parameter);
        var arg3 = cst_encode_f_64(serialId);
        return wire.wire__crate__api__UpdateGlobalVar_new(
            arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiUpdateGlobalVarNewConstMeta,
      argValues: [fromChainId, subAccountId, parameter, serialId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUpdateGlobalVarNewConstMeta => const TaskConstMeta(
        debugName: "UpdateGlobalVar_new",
        argNames: ["fromChainId", "subAccountId", "parameter", "serialId"],
      );

  @override
  String crateApiUpdateGlobalVarToJson({required UpdateGlobalVar that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar(
                that);
        return wire.wire__crate__api__UpdateGlobalVar_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiUpdateGlobalVarToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUpdateGlobalVarToJsonConstMeta =>
      const TaskConstMeta(
        debugName: "UpdateGlobalVar_to_json",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiWalletApproveErc20(
      {required Wallet that,
      required String contract,
      required String amount,
      required EthTxOption ethParams}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
                that);
        var arg1 = cst_encode_String(contract);
        var arg2 = cst_encode_String(amount);
        var arg3 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption(
                ethParams);
        return wire.wire__crate__api__Wallet_approve_erc20(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletApproveErc20ConstMeta,
      argValues: [that, contract, amount, ethParams],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletApproveErc20ConstMeta => const TaskConstMeta(
        debugName: "Wallet_approve_erc20",
        argNames: ["that", "contract", "amount", "ethParams"],
      );

  @override
  Future<String> crateApiWalletDepositErc20(
      {required Wallet that,
      required int subAccountId,
      required String depositTo,
      required String tokenAddr,
      required String amount,
      required bool mapping,
      required EthTxOption ethParams,
      required bool isGateway}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
                that);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_String(depositTo);
        var arg3 = cst_encode_String(tokenAddr);
        var arg4 = cst_encode_String(amount);
        var arg5 = cst_encode_bool(mapping);
        var arg6 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption(
                ethParams);
        var arg7 = cst_encode_bool(isGateway);
        return wire.wire__crate__api__Wallet_deposit_erc20(
            port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletDepositErc20ConstMeta,
      argValues: [
        that,
        subAccountId,
        depositTo,
        tokenAddr,
        amount,
        mapping,
        ethParams,
        isGateway
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletDepositErc20ConstMeta => const TaskConstMeta(
        debugName: "Wallet_deposit_erc20",
        argNames: [
          "that",
          "subAccountId",
          "depositTo",
          "tokenAddr",
          "amount",
          "mapping",
          "ethParams",
          "isGateway"
        ],
      );

  @override
  Future<String> crateApiWalletDepositEth(
      {required Wallet that,
      required int subAccountId,
      required String depositTo,
      required EthTxOption ethParams,
      required bool isGateway}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
                that);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_String(depositTo);
        var arg3 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption(
                ethParams);
        var arg4 = cst_encode_bool(isGateway);
        return wire.wire__crate__api__Wallet_deposit_eth(
            port_, arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletDepositEthConstMeta,
      argValues: [that, subAccountId, depositTo, ethParams, isGateway],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletDepositEthConstMeta => const TaskConstMeta(
        debugName: "Wallet_deposit_eth",
        argNames: [
          "that",
          "subAccountId",
          "depositTo",
          "ethParams",
          "isGateway"
        ],
      );

  @override
  Future<String> crateApiWalletFullExit(
      {required Wallet that,
      required int accountId,
      required int subAccountId,
      required int tokenId,
      required bool mapping,
      required EthTxOption ethParams}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
                that);
        var arg1 = cst_encode_u_32(accountId);
        var arg2 = cst_encode_u_8(subAccountId);
        var arg3 = cst_encode_u_16(tokenId);
        var arg4 = cst_encode_bool(mapping);
        var arg5 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption(
                ethParams);
        return wire.wire__crate__api__Wallet_full_exit(
            port_, arg0, arg1, arg2, arg3, arg4, arg5);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletFullExitConstMeta,
      argValues: [that, accountId, subAccountId, tokenId, mapping, ethParams],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletFullExitConstMeta => const TaskConstMeta(
        debugName: "Wallet_full_exit",
        argNames: [
          "that",
          "accountId",
          "subAccountId",
          "tokenId",
          "mapping",
          "ethParams"
        ],
      );

  @override
  Future<String> crateApiWalletGetBalance({required Wallet that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
                that);
        return wire.wire__crate__api__Wallet_get_balance(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletGetBalanceConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletGetBalanceConstMeta => const TaskConstMeta(
        debugName: "Wallet_get_balance",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiWalletGetDepositFee(
      {required Wallet that, required EthTxOption ethParams}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption(
                ethParams);
        return wire.wire__crate__api__Wallet_get_deposit_fee(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletGetDepositFeeConstMeta,
      argValues: [that, ethParams],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletGetDepositFeeConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_get_deposit_fee",
        argNames: ["that", "ethParams"],
      );

  @override
  Future<double> crateApiWalletGetNonce(
      {required Wallet that, required String blockNumber}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
                that);
        var arg1 = cst_encode_String(blockNumber);
        return wire.wire__crate__api__Wallet_get_nonce(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_f_64,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletGetNonceConstMeta,
      argValues: [that, blockNumber],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletGetNonceConstMeta => const TaskConstMeta(
        debugName: "Wallet_get_nonce",
        argNames: ["that", "blockNumber"],
      );

  @override
  Wallet crateApiWalletNew({required String url, required String privateKey}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(url);
        var arg1 = cst_encode_String(privateKey);
        return wire.wire__crate__api__Wallet_new(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletNewConstMeta,
      argValues: [url, privateKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletNewConstMeta => const TaskConstMeta(
        debugName: "Wallet_new",
        argNames: ["url", "privateKey"],
      );

  @override
  Future<String> crateApiWalletSetAuthPubkeyHash(
      {required Wallet that,
      required double nonce,
      required String newPubkeyHash,
      required EthTxOption ethParams}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
                that);
        var arg1 = cst_encode_f_64(nonce);
        var arg2 = cst_encode_String(newPubkeyHash);
        var arg3 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption(
                ethParams);
        return wire.wire__crate__api__Wallet_set_auth_pubkey_hash(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletSetAuthPubkeyHashConstMeta,
      argValues: [that, nonce, newPubkeyHash, ethParams],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletSetAuthPubkeyHashConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_set_auth_pubkey_hash",
        argNames: ["that", "nonce", "newPubkeyHash", "ethParams"],
      );

  @override
  Future<int> crateApiWalletWaitForTransaction(
      {required Wallet that, required String txHash, int? timeout}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
                that);
        var arg1 = cst_encode_String(txHash);
        var arg2 = cst_encode_opt_box_autoadd_u_32(timeout);
        return wire.wire__crate__api__Wallet_wait_for_transaction(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_8,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWalletWaitForTransactionConstMeta,
      argValues: [that, txHash, timeout],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWalletWaitForTransactionConstMeta =>
      const TaskConstMeta(
        debugName: "Wallet_wait_for_transaction",
        argNames: ["that", "txHash", "timeout"],
      );

  @override
  String crateApiWithdrawGetEthSignMsg(
      {required Withdraw that, required String tokenSymbol}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
                that);
        var arg1 = cst_encode_String(tokenSymbol);
        return wire.wire__crate__api__Withdraw_get_eth_sign_msg(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiWithdrawGetEthSignMsgConstMeta,
      argValues: [that, tokenSymbol],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWithdrawGetEthSignMsgConstMeta =>
      const TaskConstMeta(
        debugName: "Withdraw_get_eth_sign_msg",
        argNames: ["that", "tokenSymbol"],
      );

  @override
  Withdraw crateApiWithdrawNew(
      {required int accountId,
      required int subAccountId,
      required int toChainId,
      required String toAddress,
      required int l2SourceToken,
      required int l1TargetToken,
      required String amount,
      String? callData,
      required String fee,
      required int nonce,
      required bool withdrawToL1,
      required int withdrawFeeRatio,
      int? ts}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_u_8(toChainId);
        var arg3 = cst_encode_String(toAddress);
        var arg4 = cst_encode_u_32(l2SourceToken);
        var arg5 = cst_encode_u_32(l1TargetToken);
        var arg6 = cst_encode_String(amount);
        var arg7 = cst_encode_opt_String(callData);
        var arg8 = cst_encode_String(fee);
        var arg9 = cst_encode_u_32(nonce);
        var arg10 = cst_encode_bool(withdrawToL1);
        var arg11 = cst_encode_u_16(withdrawFeeRatio);
        var arg12 = cst_encode_opt_box_autoadd_u_32(ts);
        return wire.wire__crate__api__Withdraw_new(arg0, arg1, arg2, arg3, arg4,
            arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWithdrawNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        toChainId,
        toAddress,
        l2SourceToken,
        l1TargetToken,
        amount,
        callData,
        fee,
        nonce,
        withdrawToL1,
        withdrawFeeRatio,
        ts
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWithdrawNewConstMeta => const TaskConstMeta(
        debugName: "Withdraw_new",
        argNames: [
          "accountId",
          "subAccountId",
          "toChainId",
          "toAddress",
          "l2SourceToken",
          "l1TargetToken",
          "amount",
          "callData",
          "fee",
          "nonce",
          "withdrawToL1",
          "withdrawFeeRatio",
          "ts"
        ],
      );

  @override
  void crateApiWithdrawSign(
      {required Withdraw that, required ZkLinkSigner zkLinkSigner}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
                zkLinkSigner);
        return wire.wire__crate__api__Withdraw_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWithdrawSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWithdrawSignConstMeta => const TaskConstMeta(
        debugName: "Withdraw_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String crateApiWithdrawToJson({required Withdraw that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
                that);
        return wire.wire__crate__api__Withdraw_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiWithdrawToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWithdrawToJsonConstMeta => const TaskConstMeta(
        debugName: "Withdraw_to_json",
        argNames: ["that"],
      );

  @override
  String crateApiZkLinkSignatureGetPubkey({required ZkLinkSignature that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature(
                that);
        return wire.wire__crate__api__ZkLinkSignature_get_pubkey(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiZkLinkSignatureGetPubkeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiZkLinkSignatureGetPubkeyConstMeta =>
      const TaskConstMeta(
        debugName: "ZkLinkSignature_get_pubkey",
        argNames: ["that"],
      );

  @override
  String crateApiZkLinkSignatureGetSignature({required ZkLinkSignature that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature(
                that);
        return wire.wire__crate__api__ZkLinkSignature_get_signature(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiZkLinkSignatureGetSignatureConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiZkLinkSignatureGetSignatureConstMeta =>
      const TaskConstMeta(
        debugName: "ZkLinkSignature_get_signature",
        argNames: ["that"],
      );

  @override
  ZkLinkSigner crateApiZkLinkSignerEthSig({required String sig}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(sig);
        return wire.wire__crate__api__ZkLinkSigner_eth_sig(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiZkLinkSignerEthSigConstMeta,
      argValues: [sig],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiZkLinkSignerEthSigConstMeta => const TaskConstMeta(
        debugName: "ZkLinkSigner_eth_sig",
        argNames: ["sig"],
      );

  @override
  String crateApiZkLinkSignerGetPubkey({required ZkLinkSigner that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
                that);
        return wire.wire__crate__api__ZkLinkSigner_get_pubkey(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiZkLinkSignerGetPubkeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiZkLinkSignerGetPubkeyConstMeta =>
      const TaskConstMeta(
        debugName: "ZkLinkSigner_get_pubkey",
        argNames: ["that"],
      );

  @override
  String crateApiZkLinkSignerGetPubkeyHash({required ZkLinkSigner that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
                that);
        return wire.wire__crate__api__ZkLinkSigner_get_pubkey_hash(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiZkLinkSignerGetPubkeyHashConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiZkLinkSignerGetPubkeyHashConstMeta =>
      const TaskConstMeta(
        debugName: "ZkLinkSigner_get_pubkey_hash",
        argNames: ["that"],
      );

  @override
  ZkLinkSignature crateApiZkLinkSignerSignMusig(
      {required ZkLinkSigner that, required List<int> msg}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
                that);
        var arg1 = cst_encode_list_prim_u_8_loose(msg);
        return wire.wire__crate__api__ZkLinkSigner_sign_musig(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiZkLinkSignerSignMusigConstMeta,
      argValues: [that, msg],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiZkLinkSignerSignMusigConstMeta =>
      const TaskConstMeta(
        debugName: "ZkLinkSigner_sign_musig",
        argNames: ["that", "msg"],
      );

  @override
  ZkLinkSigner crateApiZkLinkSignerStarknetSig({required String sig}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(sig);
        return wire.wire__crate__api__ZkLinkSigner_starknet_sig(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiZkLinkSignerStarknetSigConstMeta,
      argValues: [sig],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiZkLinkSignerStarknetSigConstMeta =>
      const TaskConstMeta(
        debugName: "ZkLinkSigner_starknet_sig",
        argNames: ["sig"],
      );

  @override
  String crateApiClosestPackableFeeAmount({required String fee}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(fee);
        return wire.wire__crate__api__closest_packable_fee_amount(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiClosestPackableFeeAmountConstMeta,
      argValues: [fee],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClosestPackableFeeAmountConstMeta =>
      const TaskConstMeta(
        debugName: "closest_packable_fee_amount",
        argNames: ["fee"],
      );

  @override
  String crateApiClosestPackableTokenAmount({required String amount}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(amount);
        return wire.wire__crate__api__closest_packable_token_amount(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiClosestPackableTokenAmountConstMeta,
      argValues: [amount],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiClosestPackableTokenAmountConstMeta =>
      const TaskConstMeta(
        debugName: "closest_packable_token_amount",
        argNames: ["amount"],
      );

  @override
  Future<void> crateApiInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire__crate__api__init_app(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  bool crateApiIsFeeAmountPackable({required String fee}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(fee);
        return wire.wire__crate__api__is_fee_amount_packable(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiIsFeeAmountPackableConstMeta,
      argValues: [fee],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiIsFeeAmountPackableConstMeta =>
      const TaskConstMeta(
        debugName: "is_fee_amount_packable",
        argNames: ["fee"],
      );

  @override
  bool crateApiIsTokenAmountPackable({required String amount}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(amount);
        return wire.wire__crate__api__is_token_amount_packable(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kCrateApiIsTokenAmountPackableConstMeta,
      argValues: [amount],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiIsTokenAmountPackableConstMeta =>
      const TaskConstMeta(
        debugName: "is_token_amount_packable",
        argNames: ["amount"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AutoDeleveraging => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AutoDeleveraging => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChangePubKey => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChangePubKey => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Contract => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Contract => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ContractMatching => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ContractMatching => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ContractPrice => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ContractPrice => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EthTxOption => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EthTxOption => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ForcedExit => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ForcedExit => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Funding => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Funding => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FundingInfo => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FundingInfo => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Liquidation => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Liquidation => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Order =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Order =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OrderMatching => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OrderMatching => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Parameter => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Parameter => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Signer => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Signer => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SpotPriceInfo => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SpotPriceInfo => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Transfer => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Transfer => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UpdateGlobalVar => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UpdateGlobalVar => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Wallet => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Wallet => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Withdraw => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Withdraw => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ZkLinkSignature => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ZkLinkSignature => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ZkLinkSigner => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ZkLinkSigner => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  AutoDeleveraging
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AutoDeleveragingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChangePubKey
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChangePubKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Contract
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContractMatching
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractMatchingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContractPrice
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractPriceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EthTxOption
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EthTxOptionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ForcedExit
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ForcedExitImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Funding
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FundingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FundingInfo
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FundingInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Liquidation
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LiquidationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Order
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OrderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OrderMatching
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OrderMatchingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Parameter
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ParameterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Signer
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SpotPriceInfo
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SpotPriceInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Transfer
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransferImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UpdateGlobalVar
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UpdateGlobalVarImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Withdraw
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WithdrawImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ZkLinkSignature
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZkLinkSignatureImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ZkLinkSigner
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZkLinkSignerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AutoDeleveraging
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AutoDeleveragingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChangePubKey
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChangePubKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Contract
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContractMatching
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractMatchingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ForcedExit
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ForcedExitImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Funding
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FundingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Liquidation
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LiquidationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Order
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OrderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OrderMatching
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OrderMatchingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Transfer
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransferImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Withdraw
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WithdrawImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AutoDeleveraging
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AutoDeleveragingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChangePubKey
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChangePubKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Contract
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContractMatching
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractMatchingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ForcedExit
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ForcedExitImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Funding
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FundingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Liquidation
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LiquidationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Order
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OrderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OrderMatching
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OrderMatchingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Signer
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Transfer
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransferImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UpdateGlobalVar
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UpdateGlobalVarImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Withdraw
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WithdrawImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ZkLinkSignature
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZkLinkSignatureImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ZkLinkSigner
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZkLinkSignerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  AutoDeleveraging
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AutoDeleveragingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ChangePubKey
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChangePubKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Contract
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContractMatching
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractMatchingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContractPrice
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractPriceImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EthTxOption
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EthTxOptionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ForcedExit
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ForcedExitImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Funding
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FundingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FundingInfo
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FundingInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Liquidation
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return LiquidationImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Order
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OrderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OrderMatching
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OrderMatchingImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Parameter
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ParameterImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Signer
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SpotPriceInfo
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SpotPriceInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Transfer
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TransferImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UpdateGlobalVar
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UpdateGlobalVarImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WalletImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Withdraw
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WithdrawImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ZkLinkSignature
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZkLinkSignatureImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ZkLinkSigner
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZkLinkSignerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<Contract>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract)
        .toList();
  }

  @protected
  List<ContractPrice>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice)
        .toList();
  }

  @protected
  List<FundingInfo>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo)
        .toList();
  }

  @protected
  List<SpotPriceInfo>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo)
        .toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint32List dco_decode_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint32List;
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  AutoDeleveraging
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AutoDeleveragingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChangePubKey
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChangePubKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contract
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContractMatching
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractMatchingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContractPrice
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractPriceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EthTxOption
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EthTxOptionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ForcedExit
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ForcedExitImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Funding
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FundingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FundingInfo
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FundingInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Liquidation
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LiquidationImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Order
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OrderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OrderMatching
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OrderMatchingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Parameter
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ParameterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Signer
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SpotPriceInfo
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SpotPriceInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Transfer
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransferImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UpdateGlobalVar
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UpdateGlobalVarImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Withdraw
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WithdrawImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ZkLinkSignature
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZkLinkSignatureImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ZkLinkSigner
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZkLinkSignerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AutoDeleveraging
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AutoDeleveragingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChangePubKey
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChangePubKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contract
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContractMatching
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractMatchingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ForcedExit
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ForcedExitImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Funding
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FundingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Liquidation
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LiquidationImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Order
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OrderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OrderMatching
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OrderMatchingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Transfer
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransferImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Withdraw
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WithdrawImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AutoDeleveraging
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AutoDeleveragingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChangePubKey
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChangePubKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contract
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContractMatching
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractMatchingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ForcedExit
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ForcedExitImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Funding
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FundingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Liquidation
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LiquidationImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Order
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OrderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OrderMatching
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OrderMatchingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Signer
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Transfer
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransferImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UpdateGlobalVar
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UpdateGlobalVarImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Withdraw
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WithdrawImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ZkLinkSignature
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZkLinkSignatureImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ZkLinkSigner
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZkLinkSignerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AutoDeleveraging
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AutoDeleveragingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChangePubKey
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChangePubKeyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contract
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContractMatching
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractMatchingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContractPrice
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractPriceImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EthTxOption
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EthTxOptionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ForcedExit
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ForcedExitImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Funding
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FundingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FundingInfo
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FundingInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Liquidation
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return LiquidationImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Order
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OrderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OrderMatching
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OrderMatchingImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Parameter
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ParameterImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Signer
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SpotPriceInfo
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SpotPriceInfoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Transfer
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TransferImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UpdateGlobalVar
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UpdateGlobalVarImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WalletImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Withdraw
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return WithdrawImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ZkLinkSignature
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZkLinkSignatureImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ZkLinkSigner
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZkLinkSignerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt16();
  }

  @protected
  List<Contract>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Contract>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<ContractPrice>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ContractPrice>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<FundingInfo>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FundingInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<SpotPriceInfo>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SpotPriceInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
      AutoDeleveraging raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as AutoDeleveragingImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
      ChangePubKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ChangePubKeyImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
      Contract raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ContractImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
      ContractMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ContractMatchingImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
      ContractPrice raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ContractPriceImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption(
      EthTxOption raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as EthTxOptionImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
      ForcedExit raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ForcedExitImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
      Funding raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as FundingImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo(
      FundingInfo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as FundingInfoImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
      Liquidation raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as LiquidationImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
      Order raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OrderImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
      OrderMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OrderMatchingImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter(
      Parameter raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ParameterImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
      Signer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SignerImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
      SpotPriceInfo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SpotPriceInfoImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
      Transfer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as TransferImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar(
      UpdateGlobalVar raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as UpdateGlobalVarImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
      Wallet raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as WalletImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
      Withdraw raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as WithdrawImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature(
      ZkLinkSignature raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ZkLinkSignatureImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
      ZkLinkSigner raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ZkLinkSignerImpl).frbInternalCstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
      AutoDeleveraging raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as AutoDeleveragingImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
      ChangePubKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ChangePubKeyImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
      Contract raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ContractImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
      ContractMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ContractMatchingImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
      ForcedExit raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ForcedExitImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
      Funding raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as FundingImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
      Liquidation raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as LiquidationImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
      Order raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OrderImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
      OrderMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OrderMatchingImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
      Transfer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as TransferImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
      Withdraw raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as WithdrawImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
      AutoDeleveraging raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as AutoDeleveragingImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
      ChangePubKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ChangePubKeyImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
      Contract raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ContractImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
      ContractMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ContractMatchingImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
      ForcedExit raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ForcedExitImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
      Funding raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as FundingImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
      Liquidation raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as LiquidationImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
      Order raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OrderImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
      OrderMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OrderMatchingImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
      Signer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SignerImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
      Transfer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as TransferImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar(
      UpdateGlobalVar raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as UpdateGlobalVarImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
      Wallet raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as WalletImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
      Withdraw raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as WithdrawImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature(
      ZkLinkSignature raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ZkLinkSignatureImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
      ZkLinkSigner raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ZkLinkSignerImpl).frbInternalCstEncode(move: false);
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
      AutoDeleveraging raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as AutoDeleveragingImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
      ChangePubKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ChangePubKeyImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
      Contract raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ContractImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
      ContractMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ContractMatchingImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
      ContractPrice raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ContractPriceImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption(
      EthTxOption raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as EthTxOptionImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
      ForcedExit raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ForcedExitImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
      Funding raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as FundingImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo(
      FundingInfo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as FundingInfoImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
      Liquidation raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as LiquidationImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
      Order raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OrderImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
      OrderMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OrderMatchingImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter(
      Parameter raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ParameterImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
      Signer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SignerImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
      SpotPriceInfo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SpotPriceInfoImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
      Transfer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as TransferImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar(
      UpdateGlobalVar raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as UpdateGlobalVarImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
      Wallet raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as WalletImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
      Withdraw raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as WithdrawImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature(
      ZkLinkSignature raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ZkLinkSignatureImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
      ZkLinkSigner raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ZkLinkSignerImpl).frbInternalCstEncode();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  double cst_encode_f_64(double raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_i_16(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_16(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
          AutoDeleveraging self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AutoDeleveragingImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
          ChangePubKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChangePubKeyImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          Contract self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContractImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
          ContractMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContractMatchingImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
          ContractPrice self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContractPriceImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption(
          EthTxOption self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EthTxOptionImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
          ForcedExit self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ForcedExitImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
          Funding self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FundingImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo(
          FundingInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FundingInfoImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
          Liquidation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LiquidationImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
          Order self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OrderImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
          OrderMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OrderMatchingImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter(
          Parameter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ParameterImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
          Signer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SignerImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
          SpotPriceInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SpotPriceInfoImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
          Transfer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TransferImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar(
          UpdateGlobalVar self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UpdateGlobalVarImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
          Withdraw self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WithdrawImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature(
          ZkLinkSignature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ZkLinkSignatureImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
          ZkLinkSigner self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ZkLinkSignerImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
          AutoDeleveraging self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AutoDeleveragingImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
          ChangePubKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChangePubKeyImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          Contract self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContractImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
          ContractMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContractMatchingImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
          ForcedExit self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ForcedExitImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
          Funding self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FundingImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
          Liquidation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LiquidationImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
          Order self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OrderImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
          OrderMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OrderMatchingImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
          Transfer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TransferImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
          Withdraw self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WithdrawImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
          AutoDeleveraging self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AutoDeleveragingImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
          ChangePubKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChangePubKeyImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          Contract self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContractImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
          ContractMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContractMatchingImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
          ForcedExit self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ForcedExitImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
          Funding self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FundingImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
          Liquidation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LiquidationImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
          Order self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OrderImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
          OrderMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OrderMatchingImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
          Signer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SignerImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
          Transfer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TransferImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar(
          UpdateGlobalVar self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UpdateGlobalVarImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
          Withdraw self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WithdrawImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature(
          ZkLinkSignature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ZkLinkSignatureImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
          ZkLinkSigner self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ZkLinkSignerImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerAutoDeleveraging(
          AutoDeleveraging self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as AutoDeleveragingImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerChangePubKey(
          ChangePubKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ChangePubKeyImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          Contract self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContractImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractMatching(
          ContractMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContractMatchingImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
          ContractPrice self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ContractPriceImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEthTxOption(
          EthTxOption self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EthTxOptionImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerForcedExit(
          ForcedExit self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ForcedExitImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFunding(
          Funding self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FundingImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo(
          FundingInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as FundingInfoImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerLiquidation(
          Liquidation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as LiquidationImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrder(
          Order self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OrderImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerOrderMatching(
          OrderMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OrderMatchingImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerParameter(
          Parameter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ParameterImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigner(
          Signer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SignerImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
          SpotPriceInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SpotPriceInfoImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTransfer(
          Transfer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as TransferImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerUpdateGlobalVar(
          UpdateGlobalVar self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UpdateGlobalVarImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WalletImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerWithdraw(
          Withdraw self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as WithdrawImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSignature(
          ZkLinkSignature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ZkLinkSignatureImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerZkLinkSigner(
          ZkLinkSigner self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ZkLinkSignerImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt16(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          List<Contract> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContract(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
          List<ContractPrice> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContractPrice(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo(
          List<FundingInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFundingInfo(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
          List<SpotPriceInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSpotPriceInfo(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_32_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint32List(self is Uint32List ? self : Uint32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_32_strict(
      Uint32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}

@sealed
class AutoDeleveragingImpl extends RustOpaque implements AutoDeleveraging {
  // Not to be used by end users
  AutoDeleveragingImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  AutoDeleveragingImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_AutoDeleveraging,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_AutoDeleveraging,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_AutoDeleveragingPtr,
  );

  void sign({required ZkLinkSigner zkLinkSigner}) => RustLib.instance.api
      .crateApiAutoDeleveragingSign(that: this, zkLinkSigner: zkLinkSigner);

  String toJson() => RustLib.instance.api.crateApiAutoDeleveragingToJson(
        that: this,
      );
}

@sealed
class ChangePubKeyImpl extends RustOpaque implements ChangePubKey {
  // Not to be used by end users
  ChangePubKeyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ChangePubKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ChangePubKey,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ChangePubKey,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ChangePubKeyPtr,
  );

  String getEthSignMsg({required int nonce, required int accountId}) =>
      RustLib.instance.api.crateApiChangePubKeyGetEthSignMsg(
          that: this, nonce: nonce, accountId: accountId);

  void setEthAuthData({required String sig}) => RustLib.instance.api
      .crateApiChangePubKeySetEthAuthData(that: this, sig: sig);

  void sign({required ZkLinkSigner zkLinkSigner}) => RustLib.instance.api
      .crateApiChangePubKeySign(that: this, zkLinkSigner: zkLinkSigner);

  String toEip712RequestPayload(
          {required int chainId, required String address}) =>
      RustLib.instance.api.crateApiChangePubKeyToEip712RequestPayload(
          that: this, chainId: chainId, address: address);

  String toJson() => RustLib.instance.api.crateApiChangePubKeyToJson(
        that: this,
      );
}

@sealed
class ContractImpl extends RustOpaque implements Contract {
  // Not to be used by end users
  ContractImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ContractImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Contract,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Contract,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ContractPtr,
  );

  void sign({required ZkLinkSigner zkLinkSigner}) => RustLib.instance.api
      .crateApiContractSign(that: this, zkLinkSigner: zkLinkSigner);

  String toJson() => RustLib.instance.api.crateApiContractToJson(
        that: this,
      );
}

@sealed
class ContractMatchingImpl extends RustOpaque implements ContractMatching {
  // Not to be used by end users
  ContractMatchingImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ContractMatchingImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ContractMatching,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ContractMatching,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ContractMatchingPtr,
  );

  void sign({required ZkLinkSigner zkLinkSigner}) => RustLib.instance.api
      .crateApiContractMatchingSign(that: this, zkLinkSigner: zkLinkSigner);

  String toJson() => RustLib.instance.api.crateApiContractMatchingToJson(
        that: this,
      );
}

@sealed
class ContractPriceImpl extends RustOpaque implements ContractPrice {
  // Not to be used by end users
  ContractPriceImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ContractPriceImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ContractPrice,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ContractPrice,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ContractPricePtr,
  );
}

@sealed
class EthTxOptionImpl extends RustOpaque implements EthTxOption {
  // Not to be used by end users
  EthTxOptionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EthTxOptionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_EthTxOption,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_EthTxOption,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_EthTxOptionPtr,
  );
}

@sealed
class ForcedExitImpl extends RustOpaque implements ForcedExit {
  // Not to be used by end users
  ForcedExitImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ForcedExitImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ForcedExit,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ForcedExit,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ForcedExitPtr,
  );

  void sign({required ZkLinkSigner zkLinkSigner}) => RustLib.instance.api
      .crateApiForcedExitSign(that: this, zkLinkSigner: zkLinkSigner);

  String toJson() => RustLib.instance.api.crateApiForcedExitToJson(
        that: this,
      );
}

@sealed
class FundingImpl extends RustOpaque implements Funding {
  // Not to be used by end users
  FundingImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FundingImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Funding,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Funding,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FundingPtr,
  );

  void sign({required ZkLinkSigner zkLinkSigner}) => RustLib.instance.api
      .crateApiFundingSign(that: this, zkLinkSigner: zkLinkSigner);

  String toJson() => RustLib.instance.api.crateApiFundingToJson(
        that: this,
      );
}

@sealed
class FundingInfoImpl extends RustOpaque implements FundingInfo {
  // Not to be used by end users
  FundingInfoImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FundingInfoImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FundingInfo,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FundingInfo,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FundingInfoPtr,
  );
}

@sealed
class LiquidationImpl extends RustOpaque implements Liquidation {
  // Not to be used by end users
  LiquidationImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  LiquidationImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Liquidation,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Liquidation,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_LiquidationPtr,
  );

  void sign({required ZkLinkSigner zkLinkSigner}) => RustLib.instance.api
      .crateApiLiquidationSign(that: this, zkLinkSigner: zkLinkSigner);

  String toJson() => RustLib.instance.api.crateApiLiquidationToJson(
        that: this,
      );
}

@sealed
class OrderImpl extends RustOpaque implements Order {
  // Not to be used by end users
  OrderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OrderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Order,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Order,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OrderPtr,
  );

  void sign({required ZkLinkSigner zkLinkSigner}) => RustLib.instance.api
      .crateApiOrderSign(that: this, zkLinkSigner: zkLinkSigner);

  String toJson() => RustLib.instance.api.crateApiOrderToJson(
        that: this,
      );
}

@sealed
class OrderMatchingImpl extends RustOpaque implements OrderMatching {
  // Not to be used by end users
  OrderMatchingImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OrderMatchingImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_OrderMatching,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_OrderMatching,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_OrderMatchingPtr,
  );

  void sign({required ZkLinkSigner zkLinkSigner}) => RustLib.instance.api
      .crateApiOrderMatchingSign(that: this, zkLinkSigner: zkLinkSigner);

  String toJson() => RustLib.instance.api.crateApiOrderMatchingToJson(
        that: this,
      );
}

@sealed
class ParameterImpl extends RustOpaque implements Parameter {
  // Not to be used by end users
  ParameterImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ParameterImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Parameter,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Parameter,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ParameterPtr,
  );
}

@sealed
class SignerImpl extends RustOpaque implements Signer {
  // Not to be used by end users
  SignerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SignerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Signer,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Signer,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SignerPtr,
  );

  Contract createSignedContract({required Contract contract}) =>
      RustLib.instance.api
          .crateApiSignerCreateSignedContract(that: this, contract: contract);

  Order createSignedOrder({required Order order}) => RustLib.instance.api
      .crateApiSignerCreateSignedOrder(that: this, order: order);

  String signAutoDeleveraging({required AutoDeleveraging tx}) =>
      RustLib.instance.api
          .crateApiSignerSignAutoDeleveraging(that: this, tx: tx);

  String signChangePubkeyWithCreate2DataAuth(
          {required ChangePubKey tx,
          required String creatorAddress,
          required String saltArg,
          required String codeHash}) =>
      RustLib.instance.api.crateApiSignerSignChangePubkeyWithCreate2DataAuth(
          that: this,
          tx: tx,
          creatorAddress: creatorAddress,
          saltArg: saltArg,
          codeHash: codeHash);

  String signChangePubkeyWithEthEcdsaAuth({required ChangePubKey tx}) =>
      RustLib.instance.api
          .crateApiSignerSignChangePubkeyWithEthEcdsaAuth(that: this, tx: tx);

  String signChangePubkeyWithOnchain({required ChangePubKey tx}) =>
      RustLib.instance.api
          .crateApiSignerSignChangePubkeyWithOnchain(that: this, tx: tx);

  String signContractMatching({required ContractMatching tx}) =>
      RustLib.instance.api
          .crateApiSignerSignContractMatching(that: this, tx: tx);

  String signForcedExit({required ForcedExit tx}) =>
      RustLib.instance.api.crateApiSignerSignForcedExit(that: this, tx: tx);

  String signFunding({required Funding tx}) =>
      RustLib.instance.api.crateApiSignerSignFunding(that: this, tx: tx);

  String signLiquidation({required Liquidation tx}) =>
      RustLib.instance.api.crateApiSignerSignLiquidation(that: this, tx: tx);

  String signOrderMatching({required OrderMatching tx}) =>
      RustLib.instance.api.crateApiSignerSignOrderMatching(that: this, tx: tx);

  String signTransfer(
          {required Transfer tx,
          required String tokenSymbol,
          String? chainId,
          String? addr}) =>
      RustLib.instance.api.crateApiSignerSignTransfer(
          that: this,
          tx: tx,
          tokenSymbol: tokenSymbol,
          chainId: chainId,
          addr: addr);

  String signWithdraw(
          {required Withdraw tx,
          required String tokenSymbol,
          String? chainId,
          String? addr}) =>
      RustLib.instance.api.crateApiSignerSignWithdraw(
          that: this,
          tx: tx,
          tokenSymbol: tokenSymbol,
          chainId: chainId,
          addr: addr);
}

@sealed
class SpotPriceInfoImpl extends RustOpaque implements SpotPriceInfo {
  // Not to be used by end users
  SpotPriceInfoImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SpotPriceInfoImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SpotPriceInfo,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SpotPriceInfo,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SpotPriceInfoPtr,
  );
}

@sealed
class TransferImpl extends RustOpaque implements Transfer {
  // Not to be used by end users
  TransferImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TransferImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Transfer,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Transfer,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TransferPtr,
  );

  String getEthSignMsg({required String tokenSymbol}) => RustLib.instance.api
      .crateApiTransferGetEthSignMsg(that: this, tokenSymbol: tokenSymbol);

  void sign({required ZkLinkSigner zkLinkSigner}) => RustLib.instance.api
      .crateApiTransferSign(that: this, zkLinkSigner: zkLinkSigner);

  String toJson() => RustLib.instance.api.crateApiTransferToJson(
        that: this,
      );
}

@sealed
class UpdateGlobalVarImpl extends RustOpaque implements UpdateGlobalVar {
  // Not to be used by end users
  UpdateGlobalVarImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UpdateGlobalVarImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_UpdateGlobalVar,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_UpdateGlobalVar,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_UpdateGlobalVarPtr,
  );

  String toJson() => RustLib.instance.api.crateApiUpdateGlobalVarToJson(
        that: this,
      );
}

@sealed
class WalletImpl extends RustOpaque implements Wallet {
  // Not to be used by end users
  WalletImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WalletImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Wallet,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Wallet,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WalletPtr,
  );

  Future<String> approveErc20(
          {required String contract,
          required String amount,
          required EthTxOption ethParams}) =>
      RustLib.instance.api.crateApiWalletApproveErc20(
          that: this, contract: contract, amount: amount, ethParams: ethParams);

  Future<String> depositErc20(
          {required int subAccountId,
          required String depositTo,
          required String tokenAddr,
          required String amount,
          required bool mapping,
          required EthTxOption ethParams,
          required bool isGateway}) =>
      RustLib.instance.api.crateApiWalletDepositErc20(
          that: this,
          subAccountId: subAccountId,
          depositTo: depositTo,
          tokenAddr: tokenAddr,
          amount: amount,
          mapping: mapping,
          ethParams: ethParams,
          isGateway: isGateway);

  Future<String> depositEth(
          {required int subAccountId,
          required String depositTo,
          required EthTxOption ethParams,
          required bool isGateway}) =>
      RustLib.instance.api.crateApiWalletDepositEth(
          that: this,
          subAccountId: subAccountId,
          depositTo: depositTo,
          ethParams: ethParams,
          isGateway: isGateway);

  Future<String> fullExit(
          {required int accountId,
          required int subAccountId,
          required int tokenId,
          required bool mapping,
          required EthTxOption ethParams}) =>
      RustLib.instance.api.crateApiWalletFullExit(
          that: this,
          accountId: accountId,
          subAccountId: subAccountId,
          tokenId: tokenId,
          mapping: mapping,
          ethParams: ethParams);

  Future<String> getBalance() => RustLib.instance.api.crateApiWalletGetBalance(
        that: this,
      );

  Future<String> getDepositFee({required EthTxOption ethParams}) =>
      RustLib.instance.api
          .crateApiWalletGetDepositFee(that: this, ethParams: ethParams);

  Future<double> getNonce({required String blockNumber}) => RustLib.instance.api
      .crateApiWalletGetNonce(that: this, blockNumber: blockNumber);

  Future<String> setAuthPubkeyHash(
          {required double nonce,
          required String newPubkeyHash,
          required EthTxOption ethParams}) =>
      RustLib.instance.api.crateApiWalletSetAuthPubkeyHash(
          that: this,
          nonce: nonce,
          newPubkeyHash: newPubkeyHash,
          ethParams: ethParams);

  Future<int> waitForTransaction({required String txHash, int? timeout}) =>
      RustLib.instance.api.crateApiWalletWaitForTransaction(
          that: this, txHash: txHash, timeout: timeout);
}

@sealed
class WithdrawImpl extends RustOpaque implements Withdraw {
  // Not to be used by end users
  WithdrawImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  WithdrawImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Withdraw,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Withdraw,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_WithdrawPtr,
  );

  String getEthSignMsg({required String tokenSymbol}) => RustLib.instance.api
      .crateApiWithdrawGetEthSignMsg(that: this, tokenSymbol: tokenSymbol);

  void sign({required ZkLinkSigner zkLinkSigner}) => RustLib.instance.api
      .crateApiWithdrawSign(that: this, zkLinkSigner: zkLinkSigner);

  String toJson() => RustLib.instance.api.crateApiWithdrawToJson(
        that: this,
      );
}

@sealed
class ZkLinkSignatureImpl extends RustOpaque implements ZkLinkSignature {
  // Not to be used by end users
  ZkLinkSignatureImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ZkLinkSignatureImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ZkLinkSignature,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ZkLinkSignature,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ZkLinkSignaturePtr,
  );

  String getPubkey() => RustLib.instance.api.crateApiZkLinkSignatureGetPubkey(
        that: this,
      );

  String getSignature() =>
      RustLib.instance.api.crateApiZkLinkSignatureGetSignature(
        that: this,
      );
}

@sealed
class ZkLinkSignerImpl extends RustOpaque implements ZkLinkSigner {
  // Not to be used by end users
  ZkLinkSignerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ZkLinkSignerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ZkLinkSigner,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ZkLinkSigner,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ZkLinkSignerPtr,
  );

  String getPubkey() => RustLib.instance.api.crateApiZkLinkSignerGetPubkey(
        that: this,
      );

  String getPubkeyHash() =>
      RustLib.instance.api.crateApiZkLinkSignerGetPubkeyHash(
        that: this,
      );

  ZkLinkSignature signMusig({required List<int> msg}) =>
      RustLib.instance.api.crateApiZkLinkSignerSignMusig(that: this, msg: msg);
}
