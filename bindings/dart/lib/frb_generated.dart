// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.32.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.initApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.32';

  @override
  int get rustContentHash => 1188958908;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'zklink_sdk_dart',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  AutoDeleveraging autoDeleveragingNew(
      {required int accountId,
      required int subAccountId,
      required int subAccountNonce,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices,
      required int adlAccountId,
      required int pairId,
      required String adlSize,
      required String adlPrice,
      required String fee,
      required int feeToken,
      dynamic hint});

  void autoDeleveragingSign(
      {required AutoDeleveraging that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint});

  String autoDeleveragingToJson({required AutoDeleveraging that, dynamic hint});

  String changePubKeyGetEthSignMsg(
      {required ChangePubKey that,
      required int nonce,
      required int accountId,
      dynamic hint});

  ChangePubKey changePubKeyNew(
      {required int chainId,
      required int accountId,
      required int subAccountId,
      required String newPubkeyHash,
      required int feeToken,
      required String fee,
      required int nonce,
      String? ethSignature,
      int? ts,
      dynamic hint});

  void changePubKeySetEthAuthData(
      {required ChangePubKey that, required String sig, dynamic hint});

  void changePubKeySign(
      {required ChangePubKey that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint});

  String changePubKeyToEip712RequestPayload(
      {required ChangePubKey that,
      required int chainId,
      required String address,
      dynamic hint});

  String changePubKeyToJson({required ChangePubKey that, dynamic hint});

  ContractMatching contractMatchingNew(
      {required int accountId,
      required int subAccountId,
      required Contract taker,
      required List<Contract> maker,
      required String fee,
      required int feeToken,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices,
      dynamic hint});

  void contractMatchingSign(
      {required ContractMatching that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint});

  String contractMatchingToJson({required ContractMatching that, dynamic hint});

  ContractPrice contractPriceNew(
      {required int pairId, required String marketPrice, dynamic hint});

  Contract contractNew(
      {required int accountId,
      required int subAccountId,
      required int slotId,
      required int nonce,
      required int pairId,
      required String size,
      required String price,
      required bool direction,
      required int makerFeeRate,
      required int takerFeeRate,
      required bool hasSubsidy,
      dynamic hint});

  EthTxOption ethTxOptionNew(
      {required bool isSupportEip1559,
      required String to,
      double? nonce,
      String? value,
      double? gas,
      String? gasPrice,
      dynamic hint});

  ForcedExit forcedExitNew(
      {required int toChainId,
      required int initiatorAccountId,
      required int initiatorSubAccountId,
      required int targetSubAccountId,
      required String target,
      required int l2SourceToken,
      required int l1TargetToken,
      required String exitAmount,
      required int initiatorNonce,
      required bool withdrawToL1,
      int? ts,
      dynamic hint});

  void forcedExitSign(
      {required ForcedExit that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint});

  String forcedExitToJson({required ForcedExit that, dynamic hint});

  FundingInfo fundingInfoNew(
      {required int pairId,
      required String price,
      required int fundingRate,
      dynamic hint});

  Funding fundingNew(
      {required int accountId,
      required int subAccountId,
      required int subAccountNonce,
      required List<int> fundingAccountIds,
      required String fee,
      required int feeToken,
      dynamic hint});

  void fundingSign(
      {required Funding that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint});

  String fundingToJson({required Funding that, dynamic hint});

  Liquidation liquidationNew(
      {required int accountId,
      required int subAccountId,
      required int subAccountNonce,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices,
      required int liquidationAccountId,
      required String fee,
      required int feeToken,
      dynamic hint});

  void liquidationSign(
      {required Liquidation that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint});

  String liquidationToJson({required Liquidation that, dynamic hint});

  OrderMatching orderMatchingNew(
      {required int accountId,
      required int subAccountId,
      required Order taker,
      required Order maker,
      required String fee,
      required int feeToken,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices,
      required String expectBaseAmount,
      required String expectQuoteAmount,
      dynamic hint});

  void orderMatchingSign(
      {required OrderMatching that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint});

  String orderMatchingToJson({required OrderMatching that, dynamic hint});

  Order orderNew(
      {required int accountId,
      required int subAccountId,
      required int slotId,
      required int nonce,
      required int baseTokenId,
      required int quoteTokenId,
      required String amount,
      required String price,
      required bool isSell,
      required int makerFeeRate,
      required int takerFeeRate,
      required bool hasSubsidy,
      dynamic hint});

  Parameter parameterContractInfo(
      {required int pairId,
      required String symbol,
      required int initialMarginRate,
      required int maintenanceMarginRate,
      dynamic hint});

  Parameter parameterFeeAccount({required int accountId, dynamic hint});

  Parameter parameterFundingInfos(
      {required List<FundingInfo> infos, dynamic hint});

  Parameter parameterInsuranceFundAccount(
      {required int accountId, dynamic hint});

  Parameter parameterMarginInfo(
      {required int marginId,
      String? symbol,
      required int tokenId,
      required int ratio,
      dynamic hint});

  Contract signerCreateSignedContract(
      {required Signer that, required Contract contract, dynamic hint});

  Order signerCreateSignedOrder(
      {required Signer that, required Order order, dynamic hint});

  Signer signerEthSigner({required String ethPrivateKey, dynamic hint});

  String signerSignAutoDeleveraging(
      {required Signer that, required AutoDeleveraging tx, dynamic hint});

  String signerSignChangePubkeyWithCreate2DataAuth(
      {required Signer that,
      required ChangePubKey tx,
      required String creatorAddress,
      required String saltArg,
      required String codeHash,
      dynamic hint});

  String signerSignChangePubkeyWithEthEcdsaAuth(
      {required Signer that, required ChangePubKey tx, dynamic hint});

  String signerSignChangePubkeyWithOnchain(
      {required Signer that, required ChangePubKey tx, dynamic hint});

  String signerSignContractMatching(
      {required Signer that, required ContractMatching tx, dynamic hint});

  String signerSignForcedExit(
      {required Signer that, required ForcedExit tx, dynamic hint});

  String signerSignFunding(
      {required Signer that, required Funding tx, dynamic hint});

  String signerSignLiquidation(
      {required Signer that, required Liquidation tx, dynamic hint});

  String signerSignOrderMatching(
      {required Signer that, required OrderMatching tx, dynamic hint});

  String signerSignTransfer(
      {required Signer that,
      required Transfer tx,
      required String tokenSymbol,
      String? chainId,
      String? addr,
      dynamic hint});

  String signerSignWithdraw(
      {required Signer that,
      required Withdraw tx,
      required String tokenSymbol,
      String? chainId,
      String? addr,
      dynamic hint});

  Signer signerStarknetSigner(
      {required String ethPrivateKey,
      required String starknetChainId,
      required String starknetAddr,
      dynamic hint});

  SpotPriceInfo spotPriceInfoNew(
      {required int tokenId, required String price, dynamic hint});

  String transferGetEthSignMsg(
      {required Transfer that, required String tokenSymbol, dynamic hint});

  Transfer transferNew(
      {required int accountId,
      required String toAddress,
      required int fromSubAccountId,
      required int toSubAccountId,
      required int token,
      required String fee,
      required String amount,
      required int nonce,
      int? ts,
      dynamic hint});

  void transferSign(
      {required Transfer that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint});

  String transferToJson({required Transfer that, dynamic hint});

  UpdateGlobalVar updateGlobalVarNew(
      {required int fromChainId,
      required int subAccountId,
      required Parameter parameter,
      required double serialId,
      dynamic hint});

  String updateGlobalVarToJson({required UpdateGlobalVar that, dynamic hint});

  Future<String> walletApproveErc20(
      {required Wallet that,
      required String contract,
      required String amount,
      required EthTxOption ethParams,
      dynamic hint});

  Future<String> walletDepositErc20(
      {required Wallet that,
      required int subAccountId,
      required String depositTo,
      required String tokenAddr,
      required String amount,
      required bool mapping,
      required EthTxOption ethParams,
      required bool isGateway,
      dynamic hint});

  Future<String> walletDepositEth(
      {required Wallet that,
      required int subAccountId,
      required String depositTo,
      required EthTxOption ethParams,
      required bool isGateway,
      dynamic hint});

  Future<String> walletFullExit(
      {required Wallet that,
      required int accountId,
      required int subAccountId,
      required int tokenId,
      required bool mapping,
      required EthTxOption ethParams,
      dynamic hint});

  Future<String> walletGetBalance({required Wallet that, dynamic hint});

  Future<String> walletGetDepositFee(
      {required Wallet that, required EthTxOption ethParams, dynamic hint});

  Future<double> walletGetNonce(
      {required Wallet that, required String blockNumber, dynamic hint});

  Wallet walletNew(
      {required String url, required String privateKey, dynamic hint});

  Future<String> walletSetAuthPubkeyHash(
      {required Wallet that,
      required double nonce,
      required String newPubkeyHash,
      required EthTxOption ethParams,
      dynamic hint});

  Future<int> walletWaitForTransaction(
      {required Wallet that,
      required String txHash,
      int? timeout,
      dynamic hint});

  String withdrawGetEthSignMsg(
      {required Withdraw that, required String tokenSymbol, dynamic hint});

  Withdraw withdrawNew(
      {required int accountId,
      required int subAccountId,
      required int toChainId,
      required String toAddress,
      required int l2SourceToken,
      required int l1TargetToken,
      required String amount,
      String? callData,
      required String fee,
      required int nonce,
      required bool withdrawToL1,
      required int withdrawFeeRatio,
      int? ts,
      dynamic hint});

  void withdrawSign(
      {required Withdraw that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint});

  String withdrawToJson({required Withdraw that, dynamic hint});

  String zkLinkSignatureGetPubkey(
      {required ZkLinkSignature that, dynamic hint});

  String zkLinkSignatureGetSignature(
      {required ZkLinkSignature that, dynamic hint});

  ZkLinkSigner zkLinkSignerEthSig({required String sig, dynamic hint});

  String zkLinkSignerGetPubkey({required ZkLinkSigner that, dynamic hint});

  String zkLinkSignerGetPubkeyHash({required ZkLinkSigner that, dynamic hint});

  ZkLinkSignature zkLinkSignerSignMusig(
      {required ZkLinkSigner that, required List<int> msg, dynamic hint});

  ZkLinkSigner zkLinkSignerStarknetSig({required String sig, dynamic hint});

  Future<void> initApp({dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AutoDeleveraging;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AutoDeleveraging;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AutoDeleveragingPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChangePubKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChangePubKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ChangePubKeyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Contract;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Contract;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ContractPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ContractMatching;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ContractMatching;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ContractMatchingPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ContractPrice;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ContractPrice;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ContractPricePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EthTxOption;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EthTxOption;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EthTxOptionPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ForcedExit;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ForcedExit;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ForcedExitPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Funding;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Funding;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FundingPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FundingInfo;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FundingInfo;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FundingInfoPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Liquidation;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Liquidation;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_LiquidationPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Order;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Order;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OrderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OrderMatching;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OrderMatching;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OrderMatchingPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Parameter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Parameter;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ParameterPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Signer;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Signer;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SignerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SpotPriceInfo;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SpotPriceInfo;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SpotPriceInfoPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Transfer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Transfer;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TransferPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UpdateGlobalVar;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UpdateGlobalVar;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_UpdateGlobalVarPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Wallet;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Wallet;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WalletPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Withdraw;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Withdraw;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_WithdrawPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ZkLinkSignature;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ZkLinkSignature;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ZkLinkSignaturePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ZkLinkSigner;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ZkLinkSigner;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ZkLinkSignerPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  AutoDeleveraging autoDeleveragingNew(
      {required int accountId,
      required int subAccountId,
      required int subAccountNonce,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices,
      required int adlAccountId,
      required int pairId,
      required String adlSize,
      required String adlPrice,
      required String fee,
      required int feeToken,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_u_32(subAccountNonce);
        var arg3 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
                contractPrices);
        var arg4 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
                marginPrices);
        var arg5 = cst_encode_u_32(adlAccountId);
        var arg6 = cst_encode_u_16(pairId);
        var arg7 = cst_encode_String(adlSize);
        var arg8 = cst_encode_String(adlPrice);
        var arg9 = cst_encode_String(fee);
        var arg10 = cst_encode_u_16(feeToken);
        return wire.wire_AutoDeleveraging_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kAutoDeleveragingNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        subAccountNonce,
        contractPrices,
        marginPrices,
        adlAccountId,
        pairId,
        adlSize,
        adlPrice,
        fee,
        feeToken
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAutoDeleveragingNewConstMeta => const TaskConstMeta(
        debugName: "AutoDeleveraging_new",
        argNames: [
          "accountId",
          "subAccountId",
          "subAccountNonce",
          "contractPrices",
          "marginPrices",
          "adlAccountId",
          "pairId",
          "adlSize",
          "adlPrice",
          "fee",
          "feeToken"
        ],
      );

  @override
  void autoDeleveragingSign(
      {required AutoDeleveraging that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
                zkLinkSigner);
        return wire.wire_AutoDeleveraging_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kAutoDeleveragingSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAutoDeleveragingSignConstMeta => const TaskConstMeta(
        debugName: "AutoDeleveraging_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String autoDeleveragingToJson(
      {required AutoDeleveraging that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
                that);
        return wire.wire_AutoDeleveraging_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kAutoDeleveragingToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAutoDeleveragingToJsonConstMeta => const TaskConstMeta(
        debugName: "AutoDeleveraging_to_json",
        argNames: ["that"],
      );

  @override
  String changePubKeyGetEthSignMsg(
      {required ChangePubKey that,
      required int nonce,
      required int accountId,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
                that);
        var arg1 = cst_encode_u_32(nonce);
        var arg2 = cst_encode_u_32(accountId);
        return wire.wire_ChangePubKey_get_eth_sign_msg(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kChangePubKeyGetEthSignMsgConstMeta,
      argValues: [that, nonce, accountId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kChangePubKeyGetEthSignMsgConstMeta => const TaskConstMeta(
        debugName: "ChangePubKey_get_eth_sign_msg",
        argNames: ["that", "nonce", "accountId"],
      );

  @override
  ChangePubKey changePubKeyNew(
      {required int chainId,
      required int accountId,
      required int subAccountId,
      required String newPubkeyHash,
      required int feeToken,
      required String fee,
      required int nonce,
      String? ethSignature,
      int? ts,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8(chainId);
        var arg1 = cst_encode_u_32(accountId);
        var arg2 = cst_encode_u_8(subAccountId);
        var arg3 = cst_encode_String(newPubkeyHash);
        var arg4 = cst_encode_u_32(feeToken);
        var arg5 = cst_encode_String(fee);
        var arg6 = cst_encode_u_32(nonce);
        var arg7 = cst_encode_opt_String(ethSignature);
        var arg8 = cst_encode_opt_box_autoadd_u_32(ts);
        return wire.wire_ChangePubKey_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kChangePubKeyNewConstMeta,
      argValues: [
        chainId,
        accountId,
        subAccountId,
        newPubkeyHash,
        feeToken,
        fee,
        nonce,
        ethSignature,
        ts
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kChangePubKeyNewConstMeta => const TaskConstMeta(
        debugName: "ChangePubKey_new",
        argNames: [
          "chainId",
          "accountId",
          "subAccountId",
          "newPubkeyHash",
          "feeToken",
          "fee",
          "nonce",
          "ethSignature",
          "ts"
        ],
      );

  @override
  void changePubKeySetEthAuthData(
      {required ChangePubKey that, required String sig, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
                that);
        var arg1 = cst_encode_String(sig);
        return wire.wire_ChangePubKey_set_eth_auth_data(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kChangePubKeySetEthAuthDataConstMeta,
      argValues: [that, sig],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kChangePubKeySetEthAuthDataConstMeta => const TaskConstMeta(
        debugName: "ChangePubKey_set_eth_auth_data",
        argNames: ["that", "sig"],
      );

  @override
  void changePubKeySign(
      {required ChangePubKey that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
                zkLinkSigner);
        return wire.wire_ChangePubKey_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kChangePubKeySignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kChangePubKeySignConstMeta => const TaskConstMeta(
        debugName: "ChangePubKey_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String changePubKeyToEip712RequestPayload(
      {required ChangePubKey that,
      required int chainId,
      required String address,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
                that);
        var arg1 = cst_encode_u_32(chainId);
        var arg2 = cst_encode_String(address);
        return wire.wire_ChangePubKey_to_eip712_request_payload(
            arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kChangePubKeyToEip712RequestPayloadConstMeta,
      argValues: [that, chainId, address],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kChangePubKeyToEip712RequestPayloadConstMeta =>
      const TaskConstMeta(
        debugName: "ChangePubKey_to_eip712_request_payload",
        argNames: ["that", "chainId", "address"],
      );

  @override
  String changePubKeyToJson({required ChangePubKey that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
                that);
        return wire.wire_ChangePubKey_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kChangePubKeyToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kChangePubKeyToJsonConstMeta => const TaskConstMeta(
        debugName: "ChangePubKey_to_json",
        argNames: ["that"],
      );

  @override
  ContractMatching contractMatchingNew(
      {required int accountId,
      required int subAccountId,
      required Contract taker,
      required List<Contract> maker,
      required String fee,
      required int feeToken,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
                taker);
        var arg3 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
                maker);
        var arg4 = cst_encode_String(fee);
        var arg5 = cst_encode_u_16(feeToken);
        var arg6 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
                contractPrices);
        var arg7 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
                marginPrices);
        return wire.wire_ContractMatching_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kContractMatchingNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        taker,
        maker,
        fee,
        feeToken,
        contractPrices,
        marginPrices
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContractMatchingNewConstMeta => const TaskConstMeta(
        debugName: "ContractMatching_new",
        argNames: [
          "accountId",
          "subAccountId",
          "taker",
          "maker",
          "fee",
          "feeToken",
          "contractPrices",
          "marginPrices"
        ],
      );

  @override
  void contractMatchingSign(
      {required ContractMatching that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
                zkLinkSigner);
        return wire.wire_ContractMatching_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kContractMatchingSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContractMatchingSignConstMeta => const TaskConstMeta(
        debugName: "ContractMatching_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String contractMatchingToJson(
      {required ContractMatching that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
                that);
        return wire.wire_ContractMatching_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kContractMatchingToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContractMatchingToJsonConstMeta => const TaskConstMeta(
        debugName: "ContractMatching_to_json",
        argNames: ["that"],
      );

  @override
  ContractPrice contractPriceNew(
      {required int pairId, required String marketPrice, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_16(pairId);
        var arg1 = cst_encode_String(marketPrice);
        return wire.wire_ContractPrice_new(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kContractPriceNewConstMeta,
      argValues: [pairId, marketPrice],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContractPriceNewConstMeta => const TaskConstMeta(
        debugName: "ContractPrice_new",
        argNames: ["pairId", "marketPrice"],
      );

  @override
  Contract contractNew(
      {required int accountId,
      required int subAccountId,
      required int slotId,
      required int nonce,
      required int pairId,
      required String size,
      required String price,
      required bool direction,
      required int makerFeeRate,
      required int takerFeeRate,
      required bool hasSubsidy,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_u_32(slotId);
        var arg3 = cst_encode_u_32(nonce);
        var arg4 = cst_encode_u_16(pairId);
        var arg5 = cst_encode_String(size);
        var arg6 = cst_encode_String(price);
        var arg7 = cst_encode_bool(direction);
        var arg8 = cst_encode_u_8(makerFeeRate);
        var arg9 = cst_encode_u_8(takerFeeRate);
        var arg10 = cst_encode_bool(hasSubsidy);
        return wire.wire_Contract_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kContractNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        slotId,
        nonce,
        pairId,
        size,
        price,
        direction,
        makerFeeRate,
        takerFeeRate,
        hasSubsidy
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kContractNewConstMeta => const TaskConstMeta(
        debugName: "Contract_new",
        argNames: [
          "accountId",
          "subAccountId",
          "slotId",
          "nonce",
          "pairId",
          "size",
          "price",
          "direction",
          "makerFeeRate",
          "takerFeeRate",
          "hasSubsidy"
        ],
      );

  @override
  EthTxOption ethTxOptionNew(
      {required bool isSupportEip1559,
      required String to,
      double? nonce,
      String? value,
      double? gas,
      String? gasPrice,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_bool(isSupportEip1559);
        var arg1 = cst_encode_String(to);
        var arg2 = cst_encode_opt_box_autoadd_f_64(nonce);
        var arg3 = cst_encode_opt_String(value);
        var arg4 = cst_encode_opt_box_autoadd_f_64(gas);
        var arg5 = cst_encode_opt_String(gasPrice);
        return wire.wire_EthTxOption_new(arg0, arg1, arg2, arg3, arg4, arg5);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kEthTxOptionNewConstMeta,
      argValues: [isSupportEip1559, to, nonce, value, gas, gasPrice],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEthTxOptionNewConstMeta => const TaskConstMeta(
        debugName: "EthTxOption_new",
        argNames: [
          "isSupportEip1559",
          "to",
          "nonce",
          "value",
          "gas",
          "gasPrice"
        ],
      );

  @override
  ForcedExit forcedExitNew(
      {required int toChainId,
      required int initiatorAccountId,
      required int initiatorSubAccountId,
      required int targetSubAccountId,
      required String target,
      required int l2SourceToken,
      required int l1TargetToken,
      required String exitAmount,
      required int initiatorNonce,
      required bool withdrawToL1,
      int? ts,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8(toChainId);
        var arg1 = cst_encode_u_32(initiatorAccountId);
        var arg2 = cst_encode_u_8(initiatorSubAccountId);
        var arg3 = cst_encode_u_8(targetSubAccountId);
        var arg4 = cst_encode_String(target);
        var arg5 = cst_encode_u_32(l2SourceToken);
        var arg6 = cst_encode_u_32(l1TargetToken);
        var arg7 = cst_encode_String(exitAmount);
        var arg8 = cst_encode_u_32(initiatorNonce);
        var arg9 = cst_encode_bool(withdrawToL1);
        var arg10 = cst_encode_opt_box_autoadd_u_32(ts);
        return wire.wire_ForcedExit_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kForcedExitNewConstMeta,
      argValues: [
        toChainId,
        initiatorAccountId,
        initiatorSubAccountId,
        targetSubAccountId,
        target,
        l2SourceToken,
        l1TargetToken,
        exitAmount,
        initiatorNonce,
        withdrawToL1,
        ts
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kForcedExitNewConstMeta => const TaskConstMeta(
        debugName: "ForcedExit_new",
        argNames: [
          "toChainId",
          "initiatorAccountId",
          "initiatorSubAccountId",
          "targetSubAccountId",
          "target",
          "l2SourceToken",
          "l1TargetToken",
          "exitAmount",
          "initiatorNonce",
          "withdrawToL1",
          "ts"
        ],
      );

  @override
  void forcedExitSign(
      {required ForcedExit that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
                zkLinkSigner);
        return wire.wire_ForcedExit_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kForcedExitSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kForcedExitSignConstMeta => const TaskConstMeta(
        debugName: "ForcedExit_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String forcedExitToJson({required ForcedExit that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
                that);
        return wire.wire_ForcedExit_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kForcedExitToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kForcedExitToJsonConstMeta => const TaskConstMeta(
        debugName: "ForcedExit_to_json",
        argNames: ["that"],
      );

  @override
  FundingInfo fundingInfoNew(
      {required int pairId,
      required String price,
      required int fundingRate,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_16(pairId);
        var arg1 = cst_encode_String(price);
        var arg2 = cst_encode_i_16(fundingRate);
        return wire.wire_FundingInfo_new(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kFundingInfoNewConstMeta,
      argValues: [pairId, price, fundingRate],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFundingInfoNewConstMeta => const TaskConstMeta(
        debugName: "FundingInfo_new",
        argNames: ["pairId", "price", "fundingRate"],
      );

  @override
  Funding fundingNew(
      {required int accountId,
      required int subAccountId,
      required int subAccountNonce,
      required List<int> fundingAccountIds,
      required String fee,
      required int feeToken,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_u_32(subAccountNonce);
        var arg3 = cst_encode_list_prim_u_32_loose(fundingAccountIds);
        var arg4 = cst_encode_String(fee);
        var arg5 = cst_encode_u_16(feeToken);
        return wire.wire_Funding_new(arg0, arg1, arg2, arg3, arg4, arg5);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kFundingNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        subAccountNonce,
        fundingAccountIds,
        fee,
        feeToken
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFundingNewConstMeta => const TaskConstMeta(
        debugName: "Funding_new",
        argNames: [
          "accountId",
          "subAccountId",
          "subAccountNonce",
          "fundingAccountIds",
          "fee",
          "feeToken"
        ],
      );

  @override
  void fundingSign(
      {required Funding that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
                zkLinkSigner);
        return wire.wire_Funding_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kFundingSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFundingSignConstMeta => const TaskConstMeta(
        debugName: "Funding_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String fundingToJson({required Funding that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
                that);
        return wire.wire_Funding_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kFundingToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFundingToJsonConstMeta => const TaskConstMeta(
        debugName: "Funding_to_json",
        argNames: ["that"],
      );

  @override
  Liquidation liquidationNew(
      {required int accountId,
      required int subAccountId,
      required int subAccountNonce,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices,
      required int liquidationAccountId,
      required String fee,
      required int feeToken,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_u_32(subAccountNonce);
        var arg3 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
                contractPrices);
        var arg4 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
                marginPrices);
        var arg5 = cst_encode_u_32(liquidationAccountId);
        var arg6 = cst_encode_String(fee);
        var arg7 = cst_encode_u_16(feeToken);
        return wire.wire_Liquidation_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kLiquidationNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        subAccountNonce,
        contractPrices,
        marginPrices,
        liquidationAccountId,
        fee,
        feeToken
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLiquidationNewConstMeta => const TaskConstMeta(
        debugName: "Liquidation_new",
        argNames: [
          "accountId",
          "subAccountId",
          "subAccountNonce",
          "contractPrices",
          "marginPrices",
          "liquidationAccountId",
          "fee",
          "feeToken"
        ],
      );

  @override
  void liquidationSign(
      {required Liquidation that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
                zkLinkSigner);
        return wire.wire_Liquidation_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kLiquidationSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLiquidationSignConstMeta => const TaskConstMeta(
        debugName: "Liquidation_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String liquidationToJson({required Liquidation that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
                that);
        return wire.wire_Liquidation_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kLiquidationToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLiquidationToJsonConstMeta => const TaskConstMeta(
        debugName: "Liquidation_to_json",
        argNames: ["that"],
      );

  @override
  OrderMatching orderMatchingNew(
      {required int accountId,
      required int subAccountId,
      required Order taker,
      required Order maker,
      required String fee,
      required int feeToken,
      required List<ContractPrice> contractPrices,
      required List<SpotPriceInfo> marginPrices,
      required String expectBaseAmount,
      required String expectQuoteAmount,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrder(
                taker);
        var arg3 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrder(
                maker);
        var arg4 = cst_encode_String(fee);
        var arg5 = cst_encode_u_32(feeToken);
        var arg6 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
                contractPrices);
        var arg7 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
                marginPrices);
        var arg8 = cst_encode_String(expectBaseAmount);
        var arg9 = cst_encode_String(expectQuoteAmount);
        return wire.wire_OrderMatching_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kOrderMatchingNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        taker,
        maker,
        fee,
        feeToken,
        contractPrices,
        marginPrices,
        expectBaseAmount,
        expectQuoteAmount
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOrderMatchingNewConstMeta => const TaskConstMeta(
        debugName: "OrderMatching_new",
        argNames: [
          "accountId",
          "subAccountId",
          "taker",
          "maker",
          "fee",
          "feeToken",
          "contractPrices",
          "marginPrices",
          "expectBaseAmount",
          "expectQuoteAmount"
        ],
      );

  @override
  void orderMatchingSign(
      {required OrderMatching that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
                zkLinkSigner);
        return wire.wire_OrderMatching_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kOrderMatchingSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOrderMatchingSignConstMeta => const TaskConstMeta(
        debugName: "OrderMatching_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String orderMatchingToJson({required OrderMatching that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
                that);
        return wire.wire_OrderMatching_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kOrderMatchingToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOrderMatchingToJsonConstMeta => const TaskConstMeta(
        debugName: "OrderMatching_to_json",
        argNames: ["that"],
      );

  @override
  Order orderNew(
      {required int accountId,
      required int subAccountId,
      required int slotId,
      required int nonce,
      required int baseTokenId,
      required int quoteTokenId,
      required String amount,
      required String price,
      required bool isSell,
      required int makerFeeRate,
      required int takerFeeRate,
      required bool hasSubsidy,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_u_32(slotId);
        var arg3 = cst_encode_u_32(nonce);
        var arg4 = cst_encode_u_32(baseTokenId);
        var arg5 = cst_encode_u_32(quoteTokenId);
        var arg6 = cst_encode_String(amount);
        var arg7 = cst_encode_String(price);
        var arg8 = cst_encode_bool(isSell);
        var arg9 = cst_encode_u_8(makerFeeRate);
        var arg10 = cst_encode_u_8(takerFeeRate);
        var arg11 = cst_encode_bool(hasSubsidy);
        return wire.wire_Order_new(arg0, arg1, arg2, arg3, arg4, arg5, arg6,
            arg7, arg8, arg9, arg10, arg11);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrder,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kOrderNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        slotId,
        nonce,
        baseTokenId,
        quoteTokenId,
        amount,
        price,
        isSell,
        makerFeeRate,
        takerFeeRate,
        hasSubsidy
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOrderNewConstMeta => const TaskConstMeta(
        debugName: "Order_new",
        argNames: [
          "accountId",
          "subAccountId",
          "slotId",
          "nonce",
          "baseTokenId",
          "quoteTokenId",
          "amount",
          "price",
          "isSell",
          "makerFeeRate",
          "takerFeeRate",
          "hasSubsidy"
        ],
      );

  @override
  Parameter parameterContractInfo(
      {required int pairId,
      required String symbol,
      required int initialMarginRate,
      required int maintenanceMarginRate,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_16(pairId);
        var arg1 = cst_encode_String(symbol);
        var arg2 = cst_encode_u_16(initialMarginRate);
        var arg3 = cst_encode_u_16(maintenanceMarginRate);
        return wire.wire_Parameter_contract_info(arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kParameterContractInfoConstMeta,
      argValues: [pairId, symbol, initialMarginRate, maintenanceMarginRate],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kParameterContractInfoConstMeta => const TaskConstMeta(
        debugName: "Parameter_contract_info",
        argNames: [
          "pairId",
          "symbol",
          "initialMarginRate",
          "maintenanceMarginRate"
        ],
      );

  @override
  Parameter parameterFeeAccount({required int accountId, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        return wire.wire_Parameter_fee_account(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kParameterFeeAccountConstMeta,
      argValues: [accountId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kParameterFeeAccountConstMeta => const TaskConstMeta(
        debugName: "Parameter_fee_account",
        argNames: ["accountId"],
      );

  @override
  Parameter parameterFundingInfos(
      {required List<FundingInfo> infos, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo(
                infos);
        return wire.wire_Parameter_funding_infos(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kParameterFundingInfosConstMeta,
      argValues: [infos],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kParameterFundingInfosConstMeta => const TaskConstMeta(
        debugName: "Parameter_funding_infos",
        argNames: ["infos"],
      );

  @override
  Parameter parameterInsuranceFundAccount(
      {required int accountId, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        return wire.wire_Parameter_insurance_fund_account(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kParameterInsuranceFundAccountConstMeta,
      argValues: [accountId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kParameterInsuranceFundAccountConstMeta =>
      const TaskConstMeta(
        debugName: "Parameter_insurance_fund_account",
        argNames: ["accountId"],
      );

  @override
  Parameter parameterMarginInfo(
      {required int marginId,
      String? symbol,
      required int tokenId,
      required int ratio,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8(marginId);
        var arg1 = cst_encode_opt_String(symbol);
        var arg2 = cst_encode_u_32(tokenId);
        var arg3 = cst_encode_u_8(ratio);
        return wire.wire_Parameter_margin_info(arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kParameterMarginInfoConstMeta,
      argValues: [marginId, symbol, tokenId, ratio],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kParameterMarginInfoConstMeta => const TaskConstMeta(
        debugName: "Parameter_margin_info",
        argNames: ["marginId", "symbol", "tokenId", "ratio"],
      );

  @override
  Contract signerCreateSignedContract(
      {required Signer that, required Contract contract, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
                contract);
        return wire.wire_Signer_create_signed_contract(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSignerCreateSignedContractConstMeta,
      argValues: [that, contract],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignerCreateSignedContractConstMeta => const TaskConstMeta(
        debugName: "Signer_create_signed_contract",
        argNames: ["that", "contract"],
      );

  @override
  Order signerCreateSignedOrder(
      {required Signer that, required Order order, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrder(
                order);
        return wire.wire_Signer_create_signed_order(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrder,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSignerCreateSignedOrderConstMeta,
      argValues: [that, order],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignerCreateSignedOrderConstMeta => const TaskConstMeta(
        debugName: "Signer_create_signed_order",
        argNames: ["that", "order"],
      );

  @override
  Signer signerEthSigner({required String ethPrivateKey, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(ethPrivateKey);
        return wire.wire_Signer_eth_signer(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSignerEthSignerConstMeta,
      argValues: [ethPrivateKey],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignerEthSignerConstMeta => const TaskConstMeta(
        debugName: "Signer_eth_signer",
        argNames: ["ethPrivateKey"],
      );

  @override
  String signerSignAutoDeleveraging(
      {required Signer that, required AutoDeleveraging tx, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
                tx);
        return wire.wire_Signer_sign_auto_deleveraging(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSignerSignAutoDeleveragingConstMeta,
      argValues: [that, tx],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignerSignAutoDeleveragingConstMeta => const TaskConstMeta(
        debugName: "Signer_sign_auto_deleveraging",
        argNames: ["that", "tx"],
      );

  @override
  String signerSignChangePubkeyWithCreate2DataAuth(
      {required Signer that,
      required ChangePubKey tx,
      required String creatorAddress,
      required String saltArg,
      required String codeHash,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
                tx);
        var arg2 = cst_encode_String(creatorAddress);
        var arg3 = cst_encode_String(saltArg);
        var arg4 = cst_encode_String(codeHash);
        return wire.wire_Signer_sign_change_pubkey_with_create2data_auth(
            arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSignerSignChangePubkeyWithCreate2DataAuthConstMeta,
      argValues: [that, tx, creatorAddress, saltArg, codeHash],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignerSignChangePubkeyWithCreate2DataAuthConstMeta =>
      const TaskConstMeta(
        debugName: "Signer_sign_change_pubkey_with_create2data_auth",
        argNames: ["that", "tx", "creatorAddress", "saltArg", "codeHash"],
      );

  @override
  String signerSignChangePubkeyWithEthEcdsaAuth(
      {required Signer that, required ChangePubKey tx, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
                tx);
        return wire.wire_Signer_sign_change_pubkey_with_eth_ecdsa_auth(
            arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSignerSignChangePubkeyWithEthEcdsaAuthConstMeta,
      argValues: [that, tx],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignerSignChangePubkeyWithEthEcdsaAuthConstMeta =>
      const TaskConstMeta(
        debugName: "Signer_sign_change_pubkey_with_eth_ecdsa_auth",
        argNames: ["that", "tx"],
      );

  @override
  String signerSignChangePubkeyWithOnchain(
      {required Signer that, required ChangePubKey tx, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
                tx);
        return wire.wire_Signer_sign_change_pubkey_with_onchain(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSignerSignChangePubkeyWithOnchainConstMeta,
      argValues: [that, tx],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignerSignChangePubkeyWithOnchainConstMeta =>
      const TaskConstMeta(
        debugName: "Signer_sign_change_pubkey_with_onchain",
        argNames: ["that", "tx"],
      );

  @override
  String signerSignContractMatching(
      {required Signer that, required ContractMatching tx, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
                tx);
        return wire.wire_Signer_sign_contract_matching(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSignerSignContractMatchingConstMeta,
      argValues: [that, tx],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignerSignContractMatchingConstMeta => const TaskConstMeta(
        debugName: "Signer_sign_contract_matching",
        argNames: ["that", "tx"],
      );

  @override
  String signerSignForcedExit(
      {required Signer that, required ForcedExit tx, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
                tx);
        return wire.wire_Signer_sign_forced_exit(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSignerSignForcedExitConstMeta,
      argValues: [that, tx],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignerSignForcedExitConstMeta => const TaskConstMeta(
        debugName: "Signer_sign_forced_exit",
        argNames: ["that", "tx"],
      );

  @override
  String signerSignFunding(
      {required Signer that, required Funding tx, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
                tx);
        return wire.wire_Signer_sign_funding(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSignerSignFundingConstMeta,
      argValues: [that, tx],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignerSignFundingConstMeta => const TaskConstMeta(
        debugName: "Signer_sign_funding",
        argNames: ["that", "tx"],
      );

  @override
  String signerSignLiquidation(
      {required Signer that, required Liquidation tx, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
                tx);
        return wire.wire_Signer_sign_liquidation(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSignerSignLiquidationConstMeta,
      argValues: [that, tx],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignerSignLiquidationConstMeta => const TaskConstMeta(
        debugName: "Signer_sign_liquidation",
        argNames: ["that", "tx"],
      );

  @override
  String signerSignOrderMatching(
      {required Signer that, required OrderMatching tx, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
                tx);
        return wire.wire_Signer_sign_order_matching(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSignerSignOrderMatchingConstMeta,
      argValues: [that, tx],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignerSignOrderMatchingConstMeta => const TaskConstMeta(
        debugName: "Signer_sign_order_matching",
        argNames: ["that", "tx"],
      );

  @override
  String signerSignTransfer(
      {required Signer that,
      required Transfer tx,
      required String tokenSymbol,
      String? chainId,
      String? addr,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
                tx);
        var arg2 = cst_encode_String(tokenSymbol);
        var arg3 = cst_encode_opt_String(chainId);
        var arg4 = cst_encode_opt_String(addr);
        return wire.wire_Signer_sign_transfer(arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSignerSignTransferConstMeta,
      argValues: [that, tx, tokenSymbol, chainId, addr],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignerSignTransferConstMeta => const TaskConstMeta(
        debugName: "Signer_sign_transfer",
        argNames: ["that", "tx", "tokenSymbol", "chainId", "addr"],
      );

  @override
  String signerSignWithdraw(
      {required Signer that,
      required Withdraw tx,
      required String tokenSymbol,
      String? chainId,
      String? addr,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
                tx);
        var arg2 = cst_encode_String(tokenSymbol);
        var arg3 = cst_encode_opt_String(chainId);
        var arg4 = cst_encode_opt_String(addr);
        return wire.wire_Signer_sign_withdraw(arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSignerSignWithdrawConstMeta,
      argValues: [that, tx, tokenSymbol, chainId, addr],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignerSignWithdrawConstMeta => const TaskConstMeta(
        debugName: "Signer_sign_withdraw",
        argNames: ["that", "tx", "tokenSymbol", "chainId", "addr"],
      );

  @override
  Signer signerStarknetSigner(
      {required String ethPrivateKey,
      required String starknetChainId,
      required String starknetAddr,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(ethPrivateKey);
        var arg1 = cst_encode_String(starknetChainId);
        var arg2 = cst_encode_String(starknetAddr);
        return wire.wire_Signer_starknet_signer(arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSignerStarknetSignerConstMeta,
      argValues: [ethPrivateKey, starknetChainId, starknetAddr],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSignerStarknetSignerConstMeta => const TaskConstMeta(
        debugName: "Signer_starknet_signer",
        argNames: ["ethPrivateKey", "starknetChainId", "starknetAddr"],
      );

  @override
  SpotPriceInfo spotPriceInfoNew(
      {required int tokenId, required String price, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(tokenId);
        var arg1 = cst_encode_String(price);
        return wire.wire_SpotPriceInfo_new(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kSpotPriceInfoNewConstMeta,
      argValues: [tokenId, price],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSpotPriceInfoNewConstMeta => const TaskConstMeta(
        debugName: "SpotPriceInfo_new",
        argNames: ["tokenId", "price"],
      );

  @override
  String transferGetEthSignMsg(
      {required Transfer that, required String tokenSymbol, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
                that);
        var arg1 = cst_encode_String(tokenSymbol);
        return wire.wire_Transfer_get_eth_sign_msg(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kTransferGetEthSignMsgConstMeta,
      argValues: [that, tokenSymbol],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransferGetEthSignMsgConstMeta => const TaskConstMeta(
        debugName: "Transfer_get_eth_sign_msg",
        argNames: ["that", "tokenSymbol"],
      );

  @override
  Transfer transferNew(
      {required int accountId,
      required String toAddress,
      required int fromSubAccountId,
      required int toSubAccountId,
      required int token,
      required String fee,
      required String amount,
      required int nonce,
      int? ts,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_String(toAddress);
        var arg2 = cst_encode_u_8(fromSubAccountId);
        var arg3 = cst_encode_u_8(toSubAccountId);
        var arg4 = cst_encode_u_32(token);
        var arg5 = cst_encode_String(fee);
        var arg6 = cst_encode_String(amount);
        var arg7 = cst_encode_u_32(nonce);
        var arg8 = cst_encode_opt_box_autoadd_u_32(ts);
        return wire.wire_Transfer_new(
            arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kTransferNewConstMeta,
      argValues: [
        accountId,
        toAddress,
        fromSubAccountId,
        toSubAccountId,
        token,
        fee,
        amount,
        nonce,
        ts
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransferNewConstMeta => const TaskConstMeta(
        debugName: "Transfer_new",
        argNames: [
          "accountId",
          "toAddress",
          "fromSubAccountId",
          "toSubAccountId",
          "token",
          "fee",
          "amount",
          "nonce",
          "ts"
        ],
      );

  @override
  void transferSign(
      {required Transfer that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
                zkLinkSigner);
        return wire.wire_Transfer_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kTransferSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransferSignConstMeta => const TaskConstMeta(
        debugName: "Transfer_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String transferToJson({required Transfer that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
                that);
        return wire.wire_Transfer_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kTransferToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransferToJsonConstMeta => const TaskConstMeta(
        debugName: "Transfer_to_json",
        argNames: ["that"],
      );

  @override
  UpdateGlobalVar updateGlobalVarNew(
      {required int fromChainId,
      required int subAccountId,
      required Parameter parameter,
      required double serialId,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_8(fromChainId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter(
                parameter);
        var arg3 = cst_encode_f_64(serialId);
        return wire.wire_UpdateGlobalVar_new(arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kUpdateGlobalVarNewConstMeta,
      argValues: [fromChainId, subAccountId, parameter, serialId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUpdateGlobalVarNewConstMeta => const TaskConstMeta(
        debugName: "UpdateGlobalVar_new",
        argNames: ["fromChainId", "subAccountId", "parameter", "serialId"],
      );

  @override
  String updateGlobalVarToJson({required UpdateGlobalVar that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar(
                that);
        return wire.wire_UpdateGlobalVar_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kUpdateGlobalVarToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUpdateGlobalVarToJsonConstMeta => const TaskConstMeta(
        debugName: "UpdateGlobalVar_to_json",
        argNames: ["that"],
      );

  @override
  Future<String> walletApproveErc20(
      {required Wallet that,
      required String contract,
      required String amount,
      required EthTxOption ethParams,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
                that);
        var arg1 = cst_encode_String(contract);
        var arg2 = cst_encode_String(amount);
        var arg3 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption(
                ethParams);
        return wire.wire_Wallet_approve_erc20(port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kWalletApproveErc20ConstMeta,
      argValues: [that, contract, amount, ethParams],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletApproveErc20ConstMeta => const TaskConstMeta(
        debugName: "Wallet_approve_erc20",
        argNames: ["that", "contract", "amount", "ethParams"],
      );

  @override
  Future<String> walletDepositErc20(
      {required Wallet that,
      required int subAccountId,
      required String depositTo,
      required String tokenAddr,
      required String amount,
      required bool mapping,
      required EthTxOption ethParams,
      required bool isGateway,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
                that);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_String(depositTo);
        var arg3 = cst_encode_String(tokenAddr);
        var arg4 = cst_encode_String(amount);
        var arg5 = cst_encode_bool(mapping);
        var arg6 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption(
                ethParams);
        var arg7 = cst_encode_bool(isGateway);
        return wire.wire_Wallet_deposit_erc20(
            port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kWalletDepositErc20ConstMeta,
      argValues: [
        that,
        subAccountId,
        depositTo,
        tokenAddr,
        amount,
        mapping,
        ethParams,
        isGateway
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletDepositErc20ConstMeta => const TaskConstMeta(
        debugName: "Wallet_deposit_erc20",
        argNames: [
          "that",
          "subAccountId",
          "depositTo",
          "tokenAddr",
          "amount",
          "mapping",
          "ethParams",
          "isGateway"
        ],
      );

  @override
  Future<String> walletDepositEth(
      {required Wallet that,
      required int subAccountId,
      required String depositTo,
      required EthTxOption ethParams,
      required bool isGateway,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
                that);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_String(depositTo);
        var arg3 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption(
                ethParams);
        var arg4 = cst_encode_bool(isGateway);
        return wire.wire_Wallet_deposit_eth(
            port_, arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kWalletDepositEthConstMeta,
      argValues: [that, subAccountId, depositTo, ethParams, isGateway],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletDepositEthConstMeta => const TaskConstMeta(
        debugName: "Wallet_deposit_eth",
        argNames: [
          "that",
          "subAccountId",
          "depositTo",
          "ethParams",
          "isGateway"
        ],
      );

  @override
  Future<String> walletFullExit(
      {required Wallet that,
      required int accountId,
      required int subAccountId,
      required int tokenId,
      required bool mapping,
      required EthTxOption ethParams,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
                that);
        var arg1 = cst_encode_u_32(accountId);
        var arg2 = cst_encode_u_8(subAccountId);
        var arg3 = cst_encode_u_16(tokenId);
        var arg4 = cst_encode_bool(mapping);
        var arg5 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption(
                ethParams);
        return wire.wire_Wallet_full_exit(
            port_, arg0, arg1, arg2, arg3, arg4, arg5);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kWalletFullExitConstMeta,
      argValues: [that, accountId, subAccountId, tokenId, mapping, ethParams],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletFullExitConstMeta => const TaskConstMeta(
        debugName: "Wallet_full_exit",
        argNames: [
          "that",
          "accountId",
          "subAccountId",
          "tokenId",
          "mapping",
          "ethParams"
        ],
      );

  @override
  Future<String> walletGetBalance({required Wallet that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
                that);
        return wire.wire_Wallet_get_balance(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kWalletGetBalanceConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletGetBalanceConstMeta => const TaskConstMeta(
        debugName: "Wallet_get_balance",
        argNames: ["that"],
      );

  @override
  Future<String> walletGetDepositFee(
      {required Wallet that, required EthTxOption ethParams, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption(
                ethParams);
        return wire.wire_Wallet_get_deposit_fee(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kWalletGetDepositFeeConstMeta,
      argValues: [that, ethParams],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletGetDepositFeeConstMeta => const TaskConstMeta(
        debugName: "Wallet_get_deposit_fee",
        argNames: ["that", "ethParams"],
      );

  @override
  Future<double> walletGetNonce(
      {required Wallet that, required String blockNumber, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
                that);
        var arg1 = cst_encode_String(blockNumber);
        return wire.wire_Wallet_get_nonce(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_f_64,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kWalletGetNonceConstMeta,
      argValues: [that, blockNumber],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletGetNonceConstMeta => const TaskConstMeta(
        debugName: "Wallet_get_nonce",
        argNames: ["that", "blockNumber"],
      );

  @override
  Wallet walletNew(
      {required String url, required String privateKey, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(url);
        var arg1 = cst_encode_String(privateKey);
        return wire.wire_Wallet_new(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kWalletNewConstMeta,
      argValues: [url, privateKey],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletNewConstMeta => const TaskConstMeta(
        debugName: "Wallet_new",
        argNames: ["url", "privateKey"],
      );

  @override
  Future<String> walletSetAuthPubkeyHash(
      {required Wallet that,
      required double nonce,
      required String newPubkeyHash,
      required EthTxOption ethParams,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
                that);
        var arg1 = cst_encode_f_64(nonce);
        var arg2 = cst_encode_String(newPubkeyHash);
        var arg3 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption(
                ethParams);
        return wire.wire_Wallet_set_auth_pubkey_hash(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kWalletSetAuthPubkeyHashConstMeta,
      argValues: [that, nonce, newPubkeyHash, ethParams],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletSetAuthPubkeyHashConstMeta => const TaskConstMeta(
        debugName: "Wallet_set_auth_pubkey_hash",
        argNames: ["that", "nonce", "newPubkeyHash", "ethParams"],
      );

  @override
  Future<int> walletWaitForTransaction(
      {required Wallet that,
      required String txHash,
      int? timeout,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
                that);
        var arg1 = cst_encode_String(txHash);
        var arg2 = cst_encode_opt_box_autoadd_u_32(timeout);
        return wire.wire_Wallet_wait_for_transaction(port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_8,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kWalletWaitForTransactionConstMeta,
      argValues: [that, txHash, timeout],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWalletWaitForTransactionConstMeta => const TaskConstMeta(
        debugName: "Wallet_wait_for_transaction",
        argNames: ["that", "txHash", "timeout"],
      );

  @override
  String withdrawGetEthSignMsg(
      {required Withdraw that, required String tokenSymbol, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
                that);
        var arg1 = cst_encode_String(tokenSymbol);
        return wire.wire_Withdraw_get_eth_sign_msg(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kWithdrawGetEthSignMsgConstMeta,
      argValues: [that, tokenSymbol],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWithdrawGetEthSignMsgConstMeta => const TaskConstMeta(
        debugName: "Withdraw_get_eth_sign_msg",
        argNames: ["that", "tokenSymbol"],
      );

  @override
  Withdraw withdrawNew(
      {required int accountId,
      required int subAccountId,
      required int toChainId,
      required String toAddress,
      required int l2SourceToken,
      required int l1TargetToken,
      required String amount,
      String? callData,
      required String fee,
      required int nonce,
      required bool withdrawToL1,
      required int withdrawFeeRatio,
      int? ts,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_u_32(accountId);
        var arg1 = cst_encode_u_8(subAccountId);
        var arg2 = cst_encode_u_8(toChainId);
        var arg3 = cst_encode_String(toAddress);
        var arg4 = cst_encode_u_32(l2SourceToken);
        var arg5 = cst_encode_u_32(l1TargetToken);
        var arg6 = cst_encode_String(amount);
        var arg7 = cst_encode_opt_String(callData);
        var arg8 = cst_encode_String(fee);
        var arg9 = cst_encode_u_32(nonce);
        var arg10 = cst_encode_bool(withdrawToL1);
        var arg11 = cst_encode_u_16(withdrawFeeRatio);
        var arg12 = cst_encode_opt_box_autoadd_u_32(ts);
        return wire.wire_Withdraw_new(arg0, arg1, arg2, arg3, arg4, arg5, arg6,
            arg7, arg8, arg9, arg10, arg11, arg12);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kWithdrawNewConstMeta,
      argValues: [
        accountId,
        subAccountId,
        toChainId,
        toAddress,
        l2SourceToken,
        l1TargetToken,
        amount,
        callData,
        fee,
        nonce,
        withdrawToL1,
        withdrawFeeRatio,
        ts
      ],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWithdrawNewConstMeta => const TaskConstMeta(
        debugName: "Withdraw_new",
        argNames: [
          "accountId",
          "subAccountId",
          "toChainId",
          "toAddress",
          "l2SourceToken",
          "l1TargetToken",
          "amount",
          "callData",
          "fee",
          "nonce",
          "withdrawToL1",
          "withdrawFeeRatio",
          "ts"
        ],
      );

  @override
  void withdrawSign(
      {required Withdraw that,
      required ZkLinkSigner zkLinkSigner,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
                that);
        var arg1 =
            cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
                zkLinkSigner);
        return wire.wire_Withdraw_sign(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kWithdrawSignConstMeta,
      argValues: [that, zkLinkSigner],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWithdrawSignConstMeta => const TaskConstMeta(
        debugName: "Withdraw_sign",
        argNames: ["that", "zkLinkSigner"],
      );

  @override
  String withdrawToJson({required Withdraw that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
                that);
        return wire.wire_Withdraw_to_json(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kWithdrawToJsonConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWithdrawToJsonConstMeta => const TaskConstMeta(
        debugName: "Withdraw_to_json",
        argNames: ["that"],
      );

  @override
  String zkLinkSignatureGetPubkey(
      {required ZkLinkSignature that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature(
                that);
        return wire.wire_ZkLinkSignature_get_pubkey(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kZkLinkSignatureGetPubkeyConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZkLinkSignatureGetPubkeyConstMeta => const TaskConstMeta(
        debugName: "ZkLinkSignature_get_pubkey",
        argNames: ["that"],
      );

  @override
  String zkLinkSignatureGetSignature(
      {required ZkLinkSignature that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature(
                that);
        return wire.wire_ZkLinkSignature_get_signature(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kZkLinkSignatureGetSignatureConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZkLinkSignatureGetSignatureConstMeta =>
      const TaskConstMeta(
        debugName: "ZkLinkSignature_get_signature",
        argNames: ["that"],
      );

  @override
  ZkLinkSigner zkLinkSignerEthSig({required String sig, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(sig);
        return wire.wire_ZkLinkSigner_eth_sig(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kZkLinkSignerEthSigConstMeta,
      argValues: [sig],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZkLinkSignerEthSigConstMeta => const TaskConstMeta(
        debugName: "ZkLinkSigner_eth_sig",
        argNames: ["sig"],
      );

  @override
  String zkLinkSignerGetPubkey({required ZkLinkSigner that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
                that);
        return wire.wire_ZkLinkSigner_get_pubkey(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kZkLinkSignerGetPubkeyConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZkLinkSignerGetPubkeyConstMeta => const TaskConstMeta(
        debugName: "ZkLinkSigner_get_pubkey",
        argNames: ["that"],
      );

  @override
  String zkLinkSignerGetPubkeyHash({required ZkLinkSigner that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
                that);
        return wire.wire_ZkLinkSigner_get_pubkey_hash(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kZkLinkSignerGetPubkeyHashConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZkLinkSignerGetPubkeyHashConstMeta => const TaskConstMeta(
        debugName: "ZkLinkSigner_get_pubkey_hash",
        argNames: ["that"],
      );

  @override
  ZkLinkSignature zkLinkSignerSignMusig(
      {required ZkLinkSigner that, required List<int> msg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 =
            cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
                that);
        var arg1 = cst_encode_list_prim_u_8_loose(msg);
        return wire.wire_ZkLinkSigner_sign_musig(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kZkLinkSignerSignMusigConstMeta,
      argValues: [that, msg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZkLinkSignerSignMusigConstMeta => const TaskConstMeta(
        debugName: "ZkLinkSigner_sign_musig",
        argNames: ["that", "msg"],
      );

  @override
  ZkLinkSigner zkLinkSignerStarknetSig({required String sig, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(sig);
        return wire.wire_ZkLinkSigner_starknet_sig(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner,
        decodeErrorData: dco_decode_AnyhowException,
      ),
      constMeta: kZkLinkSignerStarknetSigConstMeta,
      argValues: [sig],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZkLinkSignerStarknetSigConstMeta => const TaskConstMeta(
        debugName: "ZkLinkSigner_starknet_sig",
        argNames: ["sig"],
      );

  @override
  Future<void> initApp({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_init_app(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitAppConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_AutoDeleveraging => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_AutoDeleveraging => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ChangePubKey => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ChangePubKey => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Contract => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Contract => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ContractMatching => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ContractMatching => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ContractPrice => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ContractPrice => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_EthTxOption => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_EthTxOption => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ForcedExit => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ForcedExit => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Funding => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Funding => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FundingInfo => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FundingInfo => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Liquidation => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Liquidation => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Order =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrder;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Order =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OrderMatching => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OrderMatching => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Parameter => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Parameter => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Signer => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Signer => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SpotPriceInfo => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SpotPriceInfo => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Transfer => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Transfer => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UpdateGlobalVar => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UpdateGlobalVar => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Wallet => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Wallet => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Withdraw => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Withdraw => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ZkLinkSignature => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ZkLinkSignature => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ZkLinkSigner => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ZkLinkSigner => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  AutoDeleveraging
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AutoDeleveraging.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ChangePubKey
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChangePubKey.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Contract
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Contract.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ContractMatching
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractMatching.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ContractPrice
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractPrice.dcoDecode(raw as List<dynamic>);
  }

  @protected
  EthTxOption
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EthTxOption.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ForcedExit
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ForcedExit.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Funding
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Funding.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FundingInfo
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FundingInfo.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Liquidation
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Liquidation.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Order
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Order.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OrderMatching
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OrderMatching.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Parameter
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Parameter.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Signer
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Signer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SpotPriceInfo
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SpotPriceInfo.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Transfer
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Transfer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  UpdateGlobalVar
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UpdateGlobalVar.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Wallet.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Withdraw
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Withdraw.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ZkLinkSignature
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZkLinkSignature.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ZkLinkSigner
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZkLinkSigner.dcoDecode(raw as List<dynamic>);
  }

  @protected
  AutoDeleveraging
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AutoDeleveraging.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ChangePubKey
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChangePubKey.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ContractMatching
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractMatching.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ForcedExit
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ForcedExit.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Funding
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Funding.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Liquidation
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Liquidation.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OrderMatching
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OrderMatching.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Transfer
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Transfer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Withdraw
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Withdraw.dcoDecode(raw as List<dynamic>);
  }

  @protected
  AutoDeleveraging
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AutoDeleveraging.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ChangePubKey
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChangePubKey.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ContractMatching
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractMatching.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ForcedExit
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ForcedExit.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Funding
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Funding.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Liquidation
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Liquidation.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OrderMatching
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OrderMatching.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Signer
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Signer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Transfer
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Transfer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  UpdateGlobalVar
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UpdateGlobalVar.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Wallet.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Withdraw
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Withdraw.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ZkLinkSignature
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZkLinkSignature.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ZkLinkSigner
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZkLinkSigner.dcoDecode(raw as List<dynamic>);
  }

  @protected
  AutoDeleveraging
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AutoDeleveraging.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ChangePubKey
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChangePubKey.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Contract
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Contract.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ContractMatching
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractMatching.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ContractPrice
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContractPrice.dcoDecode(raw as List<dynamic>);
  }

  @protected
  EthTxOption
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EthTxOption.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ForcedExit
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ForcedExit.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Funding
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Funding.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FundingInfo
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FundingInfo.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Liquidation
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Liquidation.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Order
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Order.dcoDecode(raw as List<dynamic>);
  }

  @protected
  OrderMatching
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OrderMatching.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Parameter
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Parameter.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Signer
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Signer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SpotPriceInfo
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SpotPriceInfo.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Transfer
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Transfer.dcoDecode(raw as List<dynamic>);
  }

  @protected
  UpdateGlobalVar
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UpdateGlobalVar.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Wallet
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Wallet.dcoDecode(raw as List<dynamic>);
  }

  @protected
  Withdraw
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Withdraw.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ZkLinkSignature
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZkLinkSignature.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ZkLinkSigner
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZkLinkSigner.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<Contract>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract)
        .toList();
  }

  @protected
  List<ContractPrice>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice)
        .toList();
  }

  @protected
  List<FundingInfo>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo)
        .toList();
  }

  @protected
  List<SpotPriceInfo>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo)
        .toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint32List dco_decode_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint32List;
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  AutoDeleveraging
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AutoDeleveraging.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChangePubKey
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChangePubKey.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contract
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Contract.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContractMatching
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractMatching.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContractPrice
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractPrice.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EthTxOption
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EthTxOption.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ForcedExit
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ForcedExit.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Funding
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Funding.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FundingInfo
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FundingInfo.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Liquidation
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Liquidation.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Order
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Order.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OrderMatching
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OrderMatching.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Parameter
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Parameter.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Signer
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Signer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SpotPriceInfo
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SpotPriceInfo.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Transfer
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Transfer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UpdateGlobalVar
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UpdateGlobalVar.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Wallet.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Withdraw
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Withdraw.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ZkLinkSignature
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZkLinkSignature.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ZkLinkSigner
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZkLinkSigner.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AutoDeleveraging
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AutoDeleveraging.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChangePubKey
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChangePubKey.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContractMatching
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractMatching.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ForcedExit
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ForcedExit.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Funding
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Funding.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Liquidation
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Liquidation.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OrderMatching
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OrderMatching.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Transfer
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Transfer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Withdraw
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Withdraw.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AutoDeleveraging
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AutoDeleveraging.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChangePubKey
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChangePubKey.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContractMatching
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractMatching.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ForcedExit
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ForcedExit.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Funding
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Funding.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Liquidation
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Liquidation.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OrderMatching
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OrderMatching.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Signer
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Signer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Transfer
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Transfer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UpdateGlobalVar
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UpdateGlobalVar.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Wallet.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Withdraw
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Withdraw.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ZkLinkSignature
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZkLinkSignature.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ZkLinkSigner
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZkLinkSigner.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  AutoDeleveraging
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return AutoDeleveraging.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ChangePubKey
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ChangePubKey.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Contract
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Contract.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContractMatching
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractMatching.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ContractPrice
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContractPrice.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  EthTxOption
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EthTxOption.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ForcedExit
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ForcedExit.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Funding
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Funding.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FundingInfo
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FundingInfo.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Liquidation
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Liquidation.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Order
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Order.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OrderMatching
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OrderMatching.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Parameter
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Parameter.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Signer
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Signer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SpotPriceInfo
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SpotPriceInfo.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Transfer
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Transfer.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UpdateGlobalVar
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UpdateGlobalVar.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Wallet
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Wallet.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Withdraw
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Withdraw.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ZkLinkSignature
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZkLinkSignature.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ZkLinkSigner
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZkLinkSigner.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  int sse_decode_i_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt16();
  }

  @protected
  List<Contract>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Contract>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<ContractPrice>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ContractPrice>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<FundingInfo>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FundingInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<SpotPriceInfo>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SpotPriceInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
      AutoDeleveraging raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
      ChangePubKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
      Contract raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
      ContractMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
      ContractPrice raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption(
      EthTxOption raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
      ForcedExit raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
      Funding raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo(
      FundingInfo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
      Liquidation raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrder(
      Order raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
      OrderMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter(
      Parameter raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
      Signer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
      SpotPriceInfo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
      Transfer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar(
      UpdateGlobalVar raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
      Wallet raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
      Withdraw raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature(
      ZkLinkSignature raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
      ZkLinkSigner raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
      AutoDeleveraging raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
      ChangePubKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
      ContractMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
      ForcedExit raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
      Funding raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
      Liquidation raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
      OrderMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
      Transfer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
      Withdraw raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
      AutoDeleveraging raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
      ChangePubKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
      ContractMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
      ForcedExit raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
      Funding raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
      Liquidation raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
      OrderMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
      Signer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
      Transfer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar(
      UpdateGlobalVar raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
      Wallet raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
      Withdraw raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature(
      ZkLinkSignature raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
      ZkLinkSigner raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: false);
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
      AutoDeleveraging raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
      ChangePubKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
      Contract raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
      ContractMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
      ContractPrice raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption(
      EthTxOption raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
      ForcedExit raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
      Funding raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo(
      FundingInfo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
      Liquidation raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrder(
      Order raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
      OrderMatching raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter(
      Parameter raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
      Signer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
      SpotPriceInfo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
      Transfer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar(
      UpdateGlobalVar raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
      Wallet raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
      Withdraw raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature(
      ZkLinkSignature raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
      ZkLinkSigner raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  double cst_encode_f_64(double raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_i_16(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_16(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_usize(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
          AutoDeleveraging self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
          ChangePubKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
          Contract self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
          ContractMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
          ContractPrice self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption(
          EthTxOption self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
          ForcedExit self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
          Funding self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo(
          FundingInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
          Liquidation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrder(
          Order self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
          OrderMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter(
          Parameter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
          Signer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
          SpotPriceInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
          Transfer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar(
          UpdateGlobalVar self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
          Withdraw self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature(
          ZkLinkSignature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
          ZkLinkSigner self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
          AutoDeleveraging self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
          ChangePubKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
          ContractMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
          ForcedExit self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
          Funding self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
          Liquidation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
          OrderMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
          Transfer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
          Withdraw self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
          AutoDeleveraging self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
          ChangePubKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
          ContractMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
          ForcedExit self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
          Funding self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
          Liquidation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
          OrderMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
          Signer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
          Transfer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar(
          UpdateGlobalVar self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
          Withdraw self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature(
          ZkLinkSignature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
          ZkLinkSigner self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockAutoDeleveraging(
          AutoDeleveraging self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockChangePubKey(
          ChangePubKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
          Contract self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractMatching(
          ContractMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
          ContractPrice self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockEthTxOption(
          EthTxOption self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockForcedExit(
          ForcedExit self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFunding(
          Funding self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo(
          FundingInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockLiquidation(
          Liquidation self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrder(
          Order self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockOrderMatching(
          OrderMatching self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockParameter(
          Parameter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSigner(
          Signer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
          SpotPriceInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTransfer(
          Transfer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockUpdateGlobalVar(
          UpdateGlobalVar self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWallet(
          Wallet self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockWithdraw(
          Withdraw self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSignature(
          ZkLinkSignature self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZkLinkSigner(
          ZkLinkSigner self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_i_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt16(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
          List<Contract> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContract(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
          List<ContractPrice> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockContractPrice(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo(
          List<FundingInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockFundingInfo(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
          List<SpotPriceInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSpotPriceInfo(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_32_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint32List(self is Uint32List ? self : Uint32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_32_strict(
      Uint32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
